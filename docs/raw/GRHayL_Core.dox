/** 
 * @defgroup GRHayL_Core GRHayL_Core
 *
 * The @gcore module provides access to core routines and functions not specific
 * to a single gem. This includes functions for packing structs using data from grid
 * functions, computing elements of an auxiliary struct, raising/lowering operators,
 * and computing the stress-energy tensor.
 *
 * Generally, we recommend using one of the `ghl_initialize_*_eos_functions_and_params`
 * to initialize the EOS struct, as it makes sure that everything is set according
 * to the input parameters. We also encourage use of the `ghl_compute_*` functions
 * to fill structs instead of manually computing and packing the associated structs.
 * The raising and lowering operator functions are very simple, and they are designed
 * to be usable with both @grhayl metric structs and user-defined arrays (so long as
 * they are indexed the same as the @grhayl metric array). Other functions are
 * primarily for convenience and to show how to get the associated variable out of the
 * struct.
 */

/**
 * @defgroup eos_init EOS initialization functions
 * @ingroup GRHayL_Core
 *
 * @gcore provides all the core routines to initialize a ghl_eos_parameters struct
 * for all the available EOS types. It also initializes the function pointers.
 */

/**
 * @defgroup pack_struct Struct packing functions
 * @ingroup GRHayL_Core
 *
 * @gcore provides routines to pack structs or compute them from input values.
 */

/**
 * @defgroup unpack_struct Struct unpacking functions
 * @ingroup GRHayL_Core
 *
 * @gcore provides routines to pack structs or compute them from input values.
 */

/**
 * @defgroup metric_contract Raising, lowering, and vec2 Operators
 * @ingroup GRHayL_Core
 *
 * @gcore provides routines to raise, lower, and compute \f$ v^\beta v_\beta \f$
 * using an input metric array. This array can either be the one in the struct
 * or a user-defined array of the same type.
 */
