# Schedule for thorn GRHayL_IGH

#TODO: This should be done by ADMBase; no need to do it here, best I can tell
STORAGE: ADMBase::metric[metric_timelevels], ADMBase::curv[metric_timelevels], ADMBase::lapse[lapse_timelevels], ADMBase::shift[shift_timelevels]

# Zach says: these explicit STORAGE statements ARE necessary. Otherwise, segfault.
# SC says: probably just need to properly set up hydrobase parameters
STORAGE: HydroBase::rho[1],HydroBase::press[1],HydroBase::eps[1],HydroBase::vel[1]

# Since the evolution code uses some HydroBase quantities, it is
# important to set certain HydroBase parameters for intended behavior:
# HydroBase::prolongation_type = 'none'
# HydroBase::timelevels = 1

STORAGE: grmhd_conservatives[3]
STORAGE: grmhd_primitives, grmhd_conservatives_rhs
STORAGE: grmhd_flux_temps, diagnostic_gfs

#########################################################
# BASIC SETUP
#########################################################
# Registration of MoL RHS, symmetries, and boundary conditions (for PreSync)
schedule GRHayL_IGH_RegisterVars in MoL_Register after BSSN_RegisterVars after lapse_RegisterVars
{
  LANG: C
  OPTIONS: META
} "Register evolved, rhs variables in GRHayL_IGH for MoL"

# Tells the symmetry thorn how to apply symmetries on each gridfunction
schedule GRHayL_IGH_InitSymBound at BASEGRID after Lapse_InitSymBound
{
  LANG: C
} "Schedule symmetries"

#########################################################
# INITIAL DATA CONVERSION
#########################################################
# Fill GRHayL_IGH grid functions using initial data from ADMBase and HydroBase
schedule group GRHayL_IGH_ID_Converter at CCTK_INITIAL after HydroBase_Initial before Convert_to_HydroBase
{
} "Translate ET-generated, HydroBase-compatible initial data and convert into variables used by GRHayL_IGH"

schedule GRHayL_IGH_enforce_detgtij_eq_1 in GRHayL_IGH_ID_Converter as first_initialdata
{
   LANG:       C
   READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift
   WRITES: ADMBase::metric(everywhere)
   #SC: loop is everywhere, so there should be no syncs; either the loop is wrong or there should be no syncs.
   SYNC: ADMBase::metric, ADMBase::lapse, ADMBase::shift, ADMBase::curv
} "Enforce BSSN metric is conformally flat and recompute ADM metric."

schedule convert_HydroBase_to_GRHayL_IGH in GRHayL_IGH_ID_Converter as second_initialdata after first_initialdata
{
   LANG:       C
   READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift
   READS:  HydroBase::rho, HydroBase::press, HydroBase::eps,
           HydroBase::vel, HydroBase::Y_e, HydroBase::entropy,
           HydroBase::temperature
   # Enforced limits on primitives can change the primitives
   WRITES: HydroBase::eps(everywhere)
   WRITES: grmhd_primitives(everywhere), grmhd_conservatives(everywhere)
   WRITES: TmunuBase::stress_energy_scalar(everywhere),
           TmunuBase::stress_energy_vector(everywhere),
           TmunuBase::stress_energy_tensor(everywhere)
   #SC: loop is everywhere, so there should be no syncs; either the loop is wrong or there should be no syncs.
   SYNC: grmhd_primitives, grmhd_conservatives
} "Convert HydroBase initial data (ID) to GRHayL_IGH variables and enforce simulation limits on primitives."

schedule GRHayL_IGH_conserv_to_prims in GRHayL_IGH_ID_Converter as third_initialdata after second_initialdata
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift
  READS:  grmhd_conservatives
  WRITES: grmhd_primitives(everywhere), grmhd_conservatives(everywhere), failure_checker(everywhere)
  WRITES: HydroBase::eps(everywhere)
  WRITES: TmunuBase::stress_energy_scalar(everywhere),
          TmunuBase::stress_energy_vector(everywhere),
          TmunuBase::stress_energy_tensor(everywhere)
} "Compute primitive variables from conservatives. This is non-trivial, requiring a Newton-Raphson root-finder."

#########################################################
# POSTPOSTINITIAL
#########################################################
# HydroBase_Con2Prim in CCTK_POSTPOSTINITIAL sets conserv to prim then
# outer boundaries (OBs, which are technically disabled). The post OB 
# SYNCs actually reprolongate the conservative variables, making cons
# and prims INCONSISTENT. So here we redo the con2prim, avoiding the 
# SYNC afterward, then copy the result to other timelevels"
schedule GROUP GRHayL_IGH_PostPostInitial at CCTK_POSTPOSTINITIAL
{
} "HydroBase_Con2Prim in CCTK_POSTPOSTINITIAL sets conserv to prim then outer boundaries (OBs, which are technically disabled). The post OB SYNCs actually reprolongate the conservative variables, making cons and prims INCONSISTENT. So here we redo the con2prim, avoiding the SYNC afterward, then copy the result to other timelevels"

# we should be able to get rid of this
schedule GRHayL_IGH_InitSymBound in GRHayL_IGH_PostPostInitial as postid
{
  LANG: C
  SYNC: grmhd_conservatives
} "Schedule symmetries -- Actually just a placeholder function to ensure prolongations / processor syncs are done before outer boundaries are updated."

# Nontrivial primitives solve, for P,rho_b,vx,vy,vz:
schedule GRHayL_IGH_conserv_to_prims in GRHayL_IGH_PostPostInitial after postid
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift
  READS:  grmhd_conservatives
  WRITES: grmhd_primitives(everywhere), grmhd_conservatives(everywhere), failure_checker(everywhere)
  WRITES: HydroBase::eps(everywhere)
  WRITES: TmunuBase::stress_energy_scalar(everywhere),
          TmunuBase::stress_energy_vector(everywhere),
          TmunuBase::stress_energy_tensor(everywhere)
} "Compute primitive variables from conservatives. This is non-trivial, requiring a Newton-Raphson root-finder."

#########################################################
# RHS EVALUATION
#########################################################

schedule group GRHayL_IGH_RHS in MoL_CalcRHS after bssn_rhs after shift_rhs
{
} "Evaluate RHSs GRHD equations"

schedule GRHayL_IGH_enforce_detgtij_eq_1 in GRHayL_IGH_RHS
{
   LANG:       C
   READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift
   WRITES: ADMBase::metric(everywhere)
} "Convert ADM variables to GRHayL_IGH BSSN variables."

schedule GRHayL_IGH_evaluate_tau_curvature_rhs in GRHayL_IGH_RHS after GRHayL_IGH_enforce_detgtij_eq_1
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift, ADMBase::curv
  READS:  grmhd_primitives
  WRITES: grmhd_conservatives_rhs
} "Initialize RHS variables to zero and evalute extrinsic curvature source term of tau_rhs"

schedule GRHayL_IGH_evaluate_flux_source_rhs in GRHayL_IGH_RHS after GRHayL_IGH_evaluate_tau_curvature_rhs
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift, ADMBase::curv
  READS:  grmhd_primitives
  WRITES: grmhd_flux_temps, grmhd_conservatives_rhs
} "Evaluate RHSs of GRHD equations"

#########################################################
# COMPUTE B FROM A & RE-SOLVE FOR PRIMITIVES
#########################################################
# After a full timestep, there are two types of boundaries that need filling:
# (A) Outer boundaries (on coarsest level)
# (B) AMR grid refinement boundaries

# (A) OUTER BOUNDARY STEPS:
# ( 0) Synchronize (prolongate/restrict) all evolved variables
# ( 1) Apply outer boundary conditions (BCs) on A_{\mu}
# ( 2) Compute B^i from A_i everywhere, synchronize (processor sync) B^i
# ( 3) Call con2prim to get consistent primitives {P,rho_b,vx,vy,vz} and conservatives at all points (if no restriction, really only need interior)
# ( 4) Apply outer BCs on {P,rho_b,vx,vy,vz}, recompute conservatives.

# (B) AMR GRID REFINEMENT BOUNDARY STEPS:
# Same as steps 0,2,3 above. Just need if() statements in steps 1,4 to prevent "outer boundaries" being updated
# Problem: all the sync's in outer boundary updates might just overwrite prolongated values.
#########################################################

# we should be able to get rid of this
schedule GRHayL_IGH_InitSymBound in HydroBase_Boundaries as Boundary_SYNCs
{
  LANG: C
  SYNC: grmhd_conservatives
} "Schedule symmetries -- Actually just a placeholder function to ensure prolongations / processor syncs are done BEFORE outer boundaries are updated."

# Nontrivial primitives solve, for P,rho_b,vx,vy,vz.
schedule GRHayL_IGH_conserv_to_prims in AddToTmunu
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift
  READS:  grmhd_conservatives
  WRITES: grmhd_primitives(everywhere), grmhd_conservatives(everywhere), failure_checker(everywhere)
  WRITES: HydroBase::eps(everywhere)
  WRITES: TmunuBase::stress_energy_scalar(everywhere),
          TmunuBase::stress_energy_vector(everywhere),
          TmunuBase::stress_energy_tensor(everywhere)
} "Compute primitive variables from conservatives. This is non-trivial, requiring a Newton-Raphson root-finder."

schedule GRHayL_IGH_outer_boundaries_on_P_rho_b_vx_vy_vz in AddToTmunu after GRHayL_IGH_conserv_to_prims
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift
  WRITES: grmhd_primitives(everywhere), grmhd_conservatives(everywhere), failure_checker(everywhere)
  WRITES: HydroBase::eps(everywhere)
  WRITES: TmunuBase::stress_energy_scalar(everywhere),
          TmunuBase::stress_energy_vector(everywhere),
          TmunuBase::stress_energy_tensor(everywhere)
# We must sync {P,rho_b,vx,vy,vz} here.
  SYNC: grmhd_primitives
} "Apply outflow-only, flat BCs on {P,rho_b,vx,vy,vz}. Outflow only == velocities pointed inward from outer boundary are set to zero."

#########################################################
# Conversion from GRHayL_IGH variables to Hydrobase
#########################################################

SCHEDULE convert_GRHayL_IGH_to_HydroBase at CCTK_INITIAL after GRHayL_IGH_ID_Converter
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift
  READS:  grmhd_primitives
  WRITES: HydroBase::rho(everywhere), HydroBase::press(everywhere),
          HydroBase::vel(everywhere), HydroBase::w_lorentz(everywhere), HydroBase::Bvec(everywhere)
} "Convert GRHayL_IGH-native variables to HydroBase"

SCHEDULE convert_GRHayL_IGH_to_HydroBase at CCTK_ANALYSIS before particle_tracerET before VolumeIntegralGroup before convert_to_MHD_3velocity after ML_BSSN_evolCalcGroup
{
  LANG: C
  OPTIONS: GLOBAL-EARLY,LOOP-LOCAL
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift
  READS:  grmhd_primitives
  WRITES: HydroBase::rho(everywhere), HydroBase::press(everywhere),
          HydroBase::vel(everywhere), HydroBase::w_lorentz(everywhere), HydroBase::Bvec(everywhere)
} "Convert GRHayL_IGH-native variables to HydroBase"

#########################################################
