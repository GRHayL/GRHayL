# Schedule for thorn GRHayLMHD

#TODO: This should be done by ADMBase; no need to do it here, best I can tell
STORAGE: ADMBase::metric[metric_timelevels], ADMBase::curv[metric_timelevels], ADMBase::lapse[lapse_timelevels], ADMBase::shift[shift_timelevels]

# Zach says: these explicit STORAGE statements ARE necessary. Otherwise, segfault.
# SC says: probably just need to properly set up hydrobase parameters
STORAGE: HydroBase::rho[1],HydroBase::press[1],HydroBase::eps[1],HydroBase::vel[1],HydroBase::Bvec[1],HydroBase::Avec[1],HydroBase::Aphi[1]

#TODO: is this needed?
# This will only allocate a single timelevel of storage if it's not already been allocated.
STORAGE: HydroBase::Avec[1], HydroBase::Aphi[1]

STORAGE: BSSN_quantities
STORAGE: grmhd_conservatives[3], Ax[3], Ay[3], Az[3], phitilde[3] 
STORAGE: grmhd_primitives_allbutBi, u0, grmhd_B_center, grmhd_B_stagger
STORAGE: grmhd_conservatives_rhs, EM_rhs
STORAGE: grmhd_primitives_reconstructed_temps, grmhd_cmin_cmax_temps, grmhd_flux_temps, failure_checker

#########################################################
# BASIC SETUP
#########################################################
# Registration of MoL RHS, symmetries, and boundary conditions (for PreSync)
schedule GRHayLMHD_RegisterVars in MoL_Register after BSSN_RegisterVars after lapse_RegisterVars
{
  LANG: C
  OPTIONS: META
} "Register evolved, rhs variables in GRHayLMHD for MoL"

# Tells the symmetry thorn how to apply symmetries on each gridfunction
schedule GRHayLMHD_InitSymBound at BASEGRID after Lapse_InitSymBound
{
  LANG: C
} "Schedule symmetries"

#########################################################
# INITIAL DATA CONVERSION
#########################################################
# Fill GRHayLMHD grid functions using initial data from ADMBase and HydroBase
schedule group GRHayLMHD_Prim2Con2Prim in HydroBase_Prim2ConInitial
{
} "Translate ET-generated, HydroBase-compatible initial data and convert into variables used by GRHayLMHD"

schedule GRHayLMHD_convert_ADM_to_BSSN in GRHayLMHD_Prim2Con2Prim
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift
  WRITES: ADMBase::metric(everywhere)
  WRITES: BSSN_quantities(everywhere)
  SYNC: BSSN_quantities, ADMBase::metric, ADMBase::lapse, ADMBase::shift, ADMBase::curv
} "Enforce BSSN metric is conformally flat and recompute ADM metric."

schedule convert_HydroBase_to_GRHayLMHD in GRHayLMHD_Prim2Con2Prim after GRHayLMHD_convert_ADM_to_BSSN
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift
  READS:  HydroBase::rho, HydroBase::press, HydroBase::eps,
          HydroBase::vel, HydroBase::Y_e, HydroBase::entropy,
          HydroBase::temperature, HydroBase::Avec, HydroBase::Aphi
  WRITES: HydroBase::eps
  WRITES: grmhd_primitives_allbutBi(everywhere), phitilde(everywhere),
          Ax(everywhere), Ay(everywhere), Az(everywhere)
  SYNC: grmhd_B_center, grmhd_B_stagger, grmhd_primitives_allbutBi, Ax, Ay, Az, phitilde, grmhd_conservatives
} "Convert HydroBase initial data (ID) to GRHayLMHD variables and enforce simulation limits on primitives."

schedule GRHayLMHD_compute_B_and_Bstagger_from_A in GRHayLMHD_Prim2Con2Prim after convert_HydroBase_to_GRHayLMHD
{
  LANG: C
  READS:  GRID::coordinates
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift
  READS:  psi_bssn, phitilde, Ax, Ay, Az
  #Technically only writes Ai and phitilde in symmetry gz's
  WRITES: phitilde(everywhere), Ax(everywhere), Ay(everywhere), Az(everywhere),
          grmhd_B_center(everywhere), grmhd_B_stagger(everywhere)
  SYNC: grmhd_B_center, grmhd_B_stagger
} "Compute B and B_stagger from A"

schedule GRHayLMHD_prims_to_conservs in GRHayLMHD_Prim2Con2Prim after GRHayLMHD_compute_B_and_Bstagger_from_A
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift
  READS:  HydroBase::eps(everywhere)
  READS:  grmhd_primitives_allbutBi, grmhd_B_center
  WRITES: grmhd_primitives_allbutBi(everywhere), grmhd_conservatives(everywhere),
          grmhd_B_center(everywhere)
  WRITES: HydroBase::eps(everywhere)
} "Compute conservative variables from primitives"

schedule GRHayLMHD_conserv_to_prims in GRHayLMHD_Prim2Con2Prim after GRHayLMHD_prims_to_conservs
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift
  READS:  grmhd_conservatives, grmhd_B_center
  WRITES: grmhd_primitives_allbutBi(everywhere), grmhd_B_center(everywhere),
          u0(everywhere), grmhd_conservatives(everywhere), failure_checker(everywhere)
  WRITES: HydroBase::eps(everywhere)
} "Compute primitive variables from conservatives"

SCHEDULE convert_GRHayLMHD_to_HydroBase in GRHayLMHD_Prim2Con2Prim after GRHayLMHD_conserv_to_prims
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift
  READS:  grmhd_primitives_allbutBi, grmhd_B_center
  WRITES: HydroBase::rho(everywhere), HydroBase::press(everywhere),
          HydroBase::vel(everywhere), HydroBase::w_lorentz(everywhere), HydroBase::Bvec(everywhere)
} "Convert GRHayLMHD-native variables to HydroBase"

#########################################################
# Symmetry setup (inherited from IllinoisGRMHD, where
# it is still incomplete)
#########################################################

schedule GRHayLMHD_set_gz_symmetries in CCTK_POSTPOSTINITIAL after Con2Prim
{
  LANG: C
  READS:  GRID::coordinates
  READS:  grmhd_conservatives,
          grmhd_B_center, grmhd_B_stagger,
          phitilde, Ax, Ay, Az
  #Technically only writes B^i, A_i, and phitilde in symmetry gz's
  WRITES: grmhd_B_center(everywhere), grmhd_B_stagger(everywhere),
          phitilde(everywhere), Ax(everywhere), Ay(everywhere), Az(everywhere)
} "Compute post-initialdata quantities"

#########################################################
# Con2Prim
#########################################################

schedule group GRHayLMHD_Con2Prim in HydroBase_Con2Prim
{
} "Compute primitive variables from conservatives"

schedule GRHayLMHD_convert_ADM_to_BSSN in GRHayLMHD_Con2Prim
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift
  WRITES: ADMBase::metric(everywhere)
  WRITES: BSSN_quantities(everywhere)
  SYNC: grmhd_conservatives, Ax, Ay, Az, phitilde
} "Enforce BSSN metric is conformally flat and recompute ADM metric."

schedule GRHayLMHD_outer_boundaries_on_A_mu in GRHayLMHD_Con2Prim after GRHayLMHD_convert_ADM_to_BSSN
{
  LANG: C
  READS:  phitilde, Ax, Ay, Az
  WRITES: phitilde(boundary), Ax(boundary), Ay(boundary), Az(boundary)
} "Apply linear extrapolation BCs on A_{mu}, so that BCs are flat on B^i"
 
schedule GRHayLMHD_compute_B_and_Bstagger_from_A in GRHayLMHD_Con2Prim after GRHayLMHD_outer_boundaries_on_A_mu
{
  LANG: C
  READS:  GRID::coordinates
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift
  READS:  psi_bssn, phitilde, Ax, Ay, Az
  #Technically only writes Ai and phitilde in symmetry gz's
  WRITES: phitilde(everywhere), Ax(everywhere), Ay(everywhere), Az(everywhere),
          grmhd_B_center(everywhere), grmhd_B_stagger(everywhere)
  # This is strictly a processor sync, as prolongation is disabled for all primitives & B^i's.
  SYNC: grmhd_B_center, grmhd_B_stagger # FIXME: Are both SYNC's necessary?
} "Compute B and B_stagger from A SYNC: grmhd_primitives_Bi,grmhd_primitives_Bi_stagger"

schedule GRHayLMHD_conserv_to_prims in GRHayLMHD_Con2Prim after GRHayLMHD_compute_B_and_Bstagger_from_A
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift
  READS:  grmhd_conservatives, grmhd_B_center
  WRITES: grmhd_primitives_allbutBi(everywhere), grmhd_B_center(everywhere),
          u0(everywhere), grmhd_conservatives(everywhere), failure_checker(everywhere)
  WRITES: HydroBase::eps(everywhere)
} "Compute primitive variables from conservatives"

schedule GRHayLMHD_outer_boundaries_on_P_rho_b_vx_vy_vz in GRHayLMHD_Con2Prim after GRHayLMHD_conserv_to_prims
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift
  READS:  grmhd_B_center
  WRITES: grmhd_primitives_allbutBi(everywhere), grmhd_B_center(everywhere),
          grmhd_conservatives(everywhere), failure_checker(everywhere)
  WRITES: HydroBase::eps(everywhere)
  WRITES: TmunuBase::stress_energy_scalar(everywhere),
          TmunuBase::stress_energy_vector(everywhere),
          TmunuBase::stress_energy_tensor(everywhere)
  SYNC: grmhd_primitives_allbutBi
} "Apply outflow-only, flat BCs on {P,rho_b,vx,vy,vz}. Outflow only == velocities pointed inward from outer boundary are set to zero"

#########################################################
# Stress-energy Tensor
#########################################################

schedule GRHayLMHD_compute_Tmunu in AddToTmunu
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift
  READS:  HydroBase::eps
  READS:  grmhd_primitives_allbutBi, u0, grmhd_B_center
  WRITES: TmunuBase::stress_energy_scalar(everywhere),
          TmunuBase::stress_energy_vector(everywhere),
          TmunuBase::stress_energy_tensor(everywhere)
} "Compute stress-energy tensor"

# This preserves original IllinoisGRMHD behavior, but it's bad form.
# This prevents usfrom making the Tmunu be "add" instead of "set".
# The ET wants AddToTmunu, not SetTmunu.
schedule GRHayLMHD_compute_Tmunu at CCTK_POSTPOSTINITIAL after Con2Prim
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift
  READS:  HydroBase::eps
  READS:  grmhd_primitives_allbutBi, u0, grmhd_B_center
  WRITES: TmunuBase::stress_energy_scalar(everywhere),
          TmunuBase::stress_energy_vector(everywhere),
          TmunuBase::stress_energy_tensor(everywhere)
} "Compute stress-energy tensor"

#########################################################
# RHS EVALUATION
#########################################################

schedule group GRHayLMHD_RHS in MoL_CalcRHS after (bssn_rhs shift_rhs)
{
} "Evaluate RHSs GRHD equations"

schedule GRHayLMHD_convert_ADM_to_BSSN in GRHayLMHD_RHS
{
   LANG: C
   READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift
   WRITES: ADMBase::metric(everywhere)
   WRITES: BSSN_quantities(everywhere)
} "Enforce BSSN metric is conformally flat and recompute ADM metric."

schedule GRHayLMHD_evaluate_tau_curvature_rhs in GRHayLMHD_RHS after GRHayLMHD_convert_ADM_to_BSSN
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift, ADMBase::curv
  READS:  grmhd_primitives_allbutBi, grmhd_B_center
  WRITES: grmhd_conservatives_rhs, EM_rhs
} "Initialize RHS variables to zero and evalute extrinsic curvature source term of tau_rhs"


schedule GRHayLMHD_evaluate_MHD_rhs in GRHayLMHD_RHS after GRHayL_IGH_evaluate_tau_curvature_rhs
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift, ADMBase::curv
  READS:  BSSN_quantities, grmhd_primitives_allbutBi, grmhd_B_center,
          grmhd_B_stagger, phitilde, Ax, Ay, Az
  WRITES: grmhd_primitives_reconstructed_temps, grmhd_flux_temps, grmhd_cmin_cmax_temps,
          grmhd_conservatives_rhs, EM_rhs
} "Evaluate RHSs for GRMHD equations"

schedule GRHayLMHD_evaluate_phitilde_and_A_gauge_rhs in GRHayLMHD_RHS after GRHayLMHD_evaluate_MHD_rhs
{
  LANG: C
  READS:  ADMBase::lapse, ADMBase::shift
  READS:  BSSN_quantities, phitilde, Ax, Ay, Az
  WRITES: grmhd_primitives_reconstructed_temps, EM_rhs
} "Evaluate phitilde RHS and gauge contributions to A_i RHS"

#########################################################
# Conversion from GRHayLMHD variables to Hydrobase
#########################################################

SCHEDULE convert_GRHayLMHD_to_HydroBase at CCTK_ANALYSIS before (compute_bi_b2_Poyn_fluxET particle_tracerET VolumeIntegralGroup convert_to_MHD_3velocity) after ML_BSSN_evolCalcGroup
{
  LANG: C
  OPTIONS: GLOBAL-EARLY,LOOP-LOCAL
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift
  READS:  grmhd_primitives_allbutBi, grmhd_B_center
  WRITES: HydroBase::rho(everywhere), HydroBase::press(everywhere),
          HydroBase::vel(everywhere), HydroBase::w_lorentz(everywhere), HydroBase::Bvec(everywhere)
} "Convert GRHayLMHD-native variables to HydroBase"
