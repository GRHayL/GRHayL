# Interface definition for thorn GRHayLMHD

implements: GRHayLMHD

inherits: ADMBase, Tmunubase, HydroBase, GRHayLib

USES INCLUDE: Symmetry.h
USES INCLUDE: GRHayLib.h

#########################################################

# BSSN-based quantities, computed from ADM quantities
CCTK_REAL BSSN_quantities type = GF TAGS='prolongation="none" Checkpoint="no"'
{
   phi_bssn, psi_bssn
   gtupxx, gtupxy, gtupxz, gtupyy, gtupyz, gtupzz
} "BSSN quantities, computed from ADM quantities"

#########################################################

# Primitive variables
# The variables rho_b and pressure are identical to the HydroBase variables. However,
# GRHayL uses the velocity v^i = u^i/u^0, while HydroBase uses the Valencia velocity, so
# these velocities differ from HydroBase.
CCTK_REAL grmhd_primitives_allbutBi type = GF TAGS='InterpNumTimelevels=1 prolongation="none"'
{
  rho_b, pressure, vx, vy, vz
} "Primitive variables density, pressure, and components of three velocity v^i. Note that v^i is defined in terms of 4-velocity as: v^i = u^i/u^0. Note that this definition differs from the Valencia formalism."

# Separating the computation of Tmunu from the con2prim routine requires providing u0.
# This is most easily done by adding another grid function.
CCTK_REAL u0 type = GF TAGS='InterpNumTimelevels=1 prolongation="none" checkpoint="no"' "4-velocity component u^0"

#########################################################

# Evolved variables
CCTK_REAL grmhd_conservatives type = GF Timelevels=3
{
  rho_star, tau, Stildex, Stildey, Stildez # Note that Stildei = \tilde{S}_i.
} "Evolved mhd variables"

# These variables are semi-staggered. Since their staggering and--by extension--
# prolongation type are different, we cannot use the Avec defined by
# Hydrobase since it is a single variable array Avec[3] which can only have
# one type of prolongation.

# WARNING: WILL NOT WORK PROPERLY WITHOUT SEMI-STAGGERED PROLONGATION/RESTRICTION
# Ax is defined on the semi-staggered grid (i,j+1/2,k+1/2)
CCTK_REAL Ax type = GF Timelevels=3 tags='Prolongation="STAGGER011"' "x-component of the vector potential, evolved when constrained_transport_scheme==3"

# Ay is defined on the semi-staggered grid (i+1/2,j,k+1/2)
CCTK_REAL Ay type = GF Timelevels=3 tags='Prolongation="STAGGER101"' "y-component of the vector potential, evolved when constrained_transport_scheme==3"

# Az is defined on the semi-staggered grid (i+1/2,j+1/2,k)
CCTK_REAL Az type = GF Timelevels=3 tags='Prolongation="STAGGER110"' "z-component of the vector potential, evolved when constrained_transport_scheme==3"

# phitilde (=Phi*psi^6) is defined on the staggered grid (i+1/2,j+1/2,k+1/2)
# WARNING: WILL NOT WORK PROPERLY WITHOUT FULLY-STAGGERED PROLONGATION/RESTRICTION
CCTK_REAL phitilde type = GF Timelevels=3 tags='Prolongation="STAGGER111"' "sqrt{gamma} Phi, where Phi is the em scalar potential"

#########################################################

# Grid functions for staggered B-fields
CCTK_REAL grmhd_B_stagger type = GF TAGS='InterpNumTimelevels=1 prolongation="none"'
{
  Bx_stagger, By_stagger, Bz_stagger
} "B-field components defined at staggered points [Bx_stagger at (i+1/2,j,k),By_stagger at (i,j+1/2,k),Bz_stagger at (i,j,k+1/2)]."

# This could probably use Bvec from HydroBase instead of making a new variable
# It is useful to split Bi from Bi_stagger, since we're generally only interested in outputting Bi for diagnostics
CCTK_REAL grmhd_B_center type = GF TAGS='InterpNumTimelevels=1 prolongation="none"'
{
  Bx_center, By_center, Bz_center
} "B-field components defined at vertices."

#########################################################

# RHS variables for MoL timestepping
CCTK_REAL grmhd_conservatives_rhs type = GF TAGS='prolongation="none" Checkpoint="no"'
{
  rho_star_rhs, tau_rhs, Stildex_rhs, Stildey_rhs, Stildez_rhs
} "Storage for the right-hand side of the partial_t rho_star, partial_t tau, and partial_t tilde{S}_i equations. Needed for MoL timestepping."

CCTK_REAL EM_rhs type = GF TAGS='prolongation="none" Checkpoint="no"'
{
  Ax_rhs, Ay_rhs, Az_rhs, phitilde_rhs
} "Storage for the right-hand side of the partial_t A equations and partial_t (psi^6 Phi) equation."

#########################################################

# Temporary variables for A-field evolution
CCTK_REAL grmhd_cmin_cmax_temps type = GF TAGS='prolongation="none" Checkpoint="no"'
{
  cmin_x, cmax_x
  cmin_y, cmax_y
  cmin_z, cmax_z
} "Store min and max characteristic speeds in all three directions."


#Temporary variables for flux computation
CCTK_REAL grmhd_flux_temps type = GF TAGS='prolongation="none" Checkpoint="no"'
{
  rho_star_flux, tau_flux, Stildex_flux, Stildey_flux, Stildez_flux
} "Temporary variables for storing the flux terms of tilde{S}_i."

# Temporary variables for reconstruction
CCTK_REAL grmhd_primitives_reconstructed_temps type = GF TAGS='prolongation="none" Checkpoint="no"'
{
  rhor, pressr, vxr, vyr, vzr
  rhol, pressl, vxl, vyl, vzl
  Bxr, Byr, Bzr, Bx_staggerr, By_staggerr, Bz_staggerr
  Bxl, Byl, Bzl, Bx_staggerl, By_staggerl, Bz_staggerl
  vxrr, vxrl, vyrr, vyrl, vzrr, vzrl
  vxlr, vxll, vylr, vyll, vzlr, vzll
} "Temporary variables used for primitives reconstruction"

#########################################################

# Diagnostic gridfunctions
CCTK_REAL failure_checker type = GF TAGS='prolongation="none" Checkpoint="no" InterpNumTimelevels=1' "Gridfunction to track conservative-to-primitives solver fixes. Beware that this gridfunction is overwritten at each RK substep."

###########################################################################

#########################################
###  Aliased functions from Carpet    ###
#########################################

CCTK_INT FUNCTION GetRefinementLevel(
      CCTK_POINTER_TO_CONST IN cctkGH)
USES FUNCTION GetRefinementLevel

####################################################
###  Aliased function from MoL for registration  ###
####################################################

CCTK_INT FUNCTION MoLRegisterEvolved(
      CCTK_INT IN EvolvedIndex,
      CCTK_INT IN RHSIndex)
CCTK_INT FUNCTION MoLRegisterEvolvedGroup(
      CCTK_INT IN EvolvedIndex,
      CCTK_INT IN RHSIndex)
CCTK_INT FUNCTION MoLRegisterSaveAndRestoreGroup(
      CCTK_INT IN SandRIndex)

USES FUNCTION MoLRegisterEvolved
USES FUNCTION MoLRegisterEvolvedGroup
USES FUNCTION MoLRegisterSaveAndRestoreGroup
