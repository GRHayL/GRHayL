# Interface definition for thorn IllinoisGRMHD

implements: GRHayLET

inherits: ADMBase, Tmunubase, HydroBase

# Since the evolution code uses some HydroBase quantities, it is
# important to set certain HydroBase parameters for intended behavior:
# HydroBase::prolongation_type = 'none'
# HydroBase::timelevels = 1

USES INCLUDE: Symmetry.h

INCLUDE HEADER: GRHayLET.h in GRHayLET.h

void FUNCTION initialize_conservatives_ETK(
                     CCTK_REAL IN rho, CCTK_REAL IN tau,
                     CCTK_REAL IN S_x, CCTK_REAL IN S_y, CCTK_REAL IN S_z,
                     CCTK_REAL IN Y_e, CCTK_REAL IN entropy, CCTK_POINTER IN cons)
PROVIDES FUNCTION initialize_conservatives_ETK WITH c2p_initialize_conservatives
  LANGUAGE C

void FUNCTION initialize_diagnostics_ETK(CCTK_POINTER IN diagnostics)
PROVIDES FUNCTION initialize_diagnostics_ETK WITH c2p_initialize_diagnostics
  LANGUAGE C

void FUNCTION initialize_general_eos_ETK(
                    CCTK_INT IN type, CCTK_REAL IN W_max,
                    CCTK_REAL IN rho_atm, CCTK_REAL IN rho_min, CCTK_REAL IN rho_max,
                    CCTK_POINTER IN eos)
PROVIDES FUNCTION initialize_general_eos_ETK WITH c2p_initialize_general_eos
  LANGUAGE C

void FUNCTION initialize_hybrid_eos_ETK(
                    CCTK_INT IN neos, CCTK_REAL ARRAY IN rho_ppoly,
                    CCTK_REAL ARRAY IN Gamma_ppoly, CCTK_REAL IN K_ppoly,
                    CCTK_REAL IN Gamma_th,
                    CCTK_POINTER IN eos)
PROVIDES FUNCTION initialize_hybrid_eos_ETK WITH c2p_initialize_hybrid_eos
  LANGUAGE C

void FUNCTION initialize_metric_ETK(CCTK_REAL IN lapse,
                     CCTK_REAL IN gxx, CCTK_REAL IN gxy, CCTK_REAL IN gxz,
                     CCTK_REAL IN gyy, CCTK_REAL IN gyz, CCTK_REAL IN gzz,
                     CCTK_REAL IN betax, CCTK_REAL IN betay, CCTK_REAL IN betaz,
                     CCTK_POINTER IN metric)
PROVIDES FUNCTION initialize_metric_ETK WITH c2p_initialize_metric
  LANGUAGE C

void FUNCTION initialize_parameters_ETK(CCTK_INT IN main, CCTK_INT ARRAY IN backup,
                CCTK_INT IN evolve_entropy, CCTK_INT IN evolve_temp, CCTK_INT IN calc_prim_guess,
                CCTK_REAL IN psi6threshold, CCTK_INT IN update_Tmunu, CCTK_INT IN Cupp_Fix,
                CCTK_POINTER IN params)
PROVIDES FUNCTION initialize_parameters_ETK WITH c2p_initialize_parameters
  LANGUAGE C

void FUNCTION initialize_primitives_ETK(
                CCTK_REAL IN rho, CCTK_REAL IN press, CCTK_REAL IN epsilon,
                CCTK_REAL IN vx, CCTK_REAL IN vy, CCTK_REAL IN vz,
                CCTK_REAL IN Bx, CCTK_REAL IN By, CCTK_REAL IN Bz,
                CCTK_REAL IN entropy, CCTK_REAL IN Y_e, CCTK_REAL IN temp,
                CCTK_POINTER IN prims)
PROVIDES FUNCTION initialize_primitives_ETK WITH c2p_initialize_primitives
  LANGUAGE C

void FUNCTION return_conservatives_ETK(
             CCTK_POINTER_TO_CONST IN void_cons,
             CCTK_REAL OUT rho,
             CCTK_REAL OUT tau,
             CCTK_REAL OUT S_x,
             CCTK_REAL OUT S_y,
             CCTK_REAL OUT S_z,
             CCTK_REAL OUT Y_e,
             CCTK_REAL OUT entropy)
PROVIDES FUNCTION return_conservatives_ETK WITH c2p_return_conservatives
  LANGUAGE C

void FUNCTION return_primitives_ETK(
             CCTK_POINTER_TO_CONST IN void_prims,
             CCTK_REAL OUT rho,
             CCTK_REAL OUT press,
             CCTK_REAL OUT epsilon,
             CCTK_REAL OUT vx,
             CCTK_REAL OUT vy,
             CCTK_REAL OUT vz,
             CCTK_REAL OUT Bx,
             CCTK_REAL OUT By,
             CCTK_REAL OUT Bz,
             CCTK_REAL OUT entropy,
             CCTK_REAL OUT Y_e,
             CCTK_REAL OUT temp)
PROVIDES FUNCTION return_primitives_ETK WITH c2p_return_primitives
  LANGUAGE C

#########################################################

# BSSN-based quantities, computed from ADM quantities
CCTK_REAL BSSN_quantities type = GF TAGS='prolongation="none" Checkpoint="no"'
{
   gtxx,gtxy,gtxz,gtyy,gtyz,gtzz,gtupxx,gtupxy,gtupxz,gtupyy,gtupyz,gtupzz,phi_bssn,psi_bssn,lapm1
} "BSSN quantities, computed from ADM quantities"

#########################################################

# Primitive variables
# The HydroBase quantities rho and press are used as the primitives in this code. However,
# GRHayL uses the velocity v^i = u^i/u^0, while HydroBase uses the Valencia velocity, so
# we declare our own velocities here.
cctk_real grmhd_primitives_allbutBi type = GF TAGS='InterpNumTimelevels=1 prolongation="none"'
{
  vx, vy, vz
} "Primitive variables density, pressure, and components of three velocity v^i. Note that v^i is defined in terms of 4-velocity as: v^i = u^i/u^0. Note that this definition differs from the Valencia formalism."

#########################################################

# Evolved variables
cctk_real grmhd_conservatives type = GF Timelevels=3
{
  rho_star, tau, Stildex, Stildey, Stildez # Note that Stildei = \tilde{S}_i.
} "Evolved mhd variables"

# These variables are semi-staggered. Since their staggering and--by extension--
# prolongation type are different, we cannot use the Avec defined by
# Hydrobase since it is a single variable array Avec[3] which can only have
# one type of prolongation.

# WARNING: WILL NOT WORK PROPERLY WITHOUT SEMI-STAGGERED PROLONGATION/RESTRICTION
# Ax is defined on the semi-staggered grid (i,j+1/2,k+1/2)
CCTK_REAL em_Ax type = GF Timelevels=3 tags='Prolongation="STAGGER011"'
{
  Ax
} "x-component of the vector potential, evolved when constrained_transport_scheme==3"

# Ay is defined on the semi-staggered grid (i+1/2,j,k+1/2)
CCTK_REAL em_Ay type = GF Timelevels=3 tags='Prolongation="STAGGER101"'
{
  Ay
} "y-component of the vector potential, evolved when constrained_transport_scheme==3"

# Az is defined on the semi-staggered grid (i+1/2,j+1/2,k)
CCTK_REAL em_Az type = GF Timelevels=3 tags='Prolongation="STAGGER110"'
{
  Az
} "z-component of the vector potential, evolved when constrained_transport_scheme==3"

# phitilde (=Phi*psi^6) is defined on the staggered grid (i+1/2,j+1/2,k+1/2)
# WARNING: WILL NOT WORK PROPERLY WITHOUT FULLY-STAGGERED PROLONGATION/RESTRICTION
CCTK_REAL em_psi6phi type = GF Timelevels=3 tags='Prolongation="STAGGER111"'
{
  phitilde
} "sqrt{gamma} Phi, where Phi is the em scalar potential"

#########################################################

# Grid functions for staggered B-fields
CCTK_REAL grmhd_B_stagger type = GF TAGS='InterpNumTimelevels=1 prolongation="none"'
{
  Bx_stagger
  By_stagger
  Bz_stagger
} "B-field components defined at staggered points [Bx_stagger at (i+1/2,j,k),By_stagger at (i,j+1/2,k),Bz_stagger at (i,j,k+1/2)]."

#########################################################

# RHS variables for MoL timestepping
CCTK_REAL A_rhs type = GF TAGS='prolongation="none" Checkpoint="no"'
{
  Ax_rhs
  Ay_rhs
  Az_rhs
} "Storage for the right-hand side of the partial_t A equations."

CCTK_REAL phitilde_rhs type = GF TAGS='prolongation="none" Checkpoint="no"'
{
  phitilde_rhs
} "Storage for the right-hand side of the partial_t (psi^6 Phi) equation."

#########################################################

# Temporary variables for A-field evolution
CCTK_REAL grmhd_cmin_cmax_temps type = GF TAGS='prolongation="none" Checkpoint="no"'
{
  cmin_x, cmax_x
  cmin_y, cmax_y
  cmin_z, cmax_z
} "Store min and max characteristic speeds in all three directions."

#########################################################

# Temporary variables for reconstruction
CCTK_REAL grmhd_primitives_reconstructed_temps type = GF TAGS='prolongation="none" Checkpoint="no"'
{
  rhor, pressr, vxr, vyr, vzr
  rhol, pressl, vxl, vyl, vzl
  Bxr, Byr, Bzr, Bx_staggerr, By_staggerr, Bz_staggerr
  Bxl, Byl, Bzl, Bx_staggerl, By_staggerl, Bz_staggerl
  vxrr, vxrl, vyrr, vyrl, vzrr, vzrl
  vxlr, vxll, vylr, vyll, vzlr, vzll
} "Temporary variables used for primitives reconstruction"

#########################################################

# Diagnostic gridfunctions
CCTK_REAL diagnostic_gfs type = GF TAGS='prolongation="none" Checkpoint="no"'
{
  failure_checker
} "Gridfunction to track conservative-to-primitives solver fixes. Beware that this gridfunction is overwritten at each RK substep."

#########################################
###  Aliased functions from Carpet    ###
#########################################

CCTK_INT FUNCTION GetRefinementLevel
        (CCTK_POINTER_TO_CONST IN cctkGH)
USES FUNCTION GetRefinementLevel

