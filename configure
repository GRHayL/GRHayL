#!/bin/sh
#
# configure
#
# (c) 2023, Leo Werneck
#
# This is GRHayL's configure script, which is responsible for ensuring users are
# able to compile, test, and install GRHayL on different systems.

pkg="GRHayL"
pkg_short="GRHayL"
pkg_version="1.0.0"
libname="grhayl"

red()
{
    printf "\033[1m\033[31m$1\033[0m"
}

green()
{
    printf "\033[1m\033[32m$1\033[0m"
}

blue()
{
    printf "\033[1m\033[34m$1\033[0m"
}

YES()
{
    green "YES"
    if [ $# -eq 1 ]; then
        printf " ($1)\n"
    else
        printf "\n"
    fi
}

NO()
{
    red "NO"
    if [ $# -eq 1 ]; then
        printf " ($1)\n"
    else
        printf "\n"
    fi
}

error()
{
    red "ERROR: "
    printf "$1\n"
    exit 1
}

help_message()
{
    echo 'This is the configuration script for $pkg.'
    echo 'Syntax: ./configure [-h,--help] [-l,--license] [-r,--reconfigure] [-s,--silent]'
    echo '                    [--noomp] [--nohdf5] [--prefix=<dir>] [--builddir=<dir>]'
    echo '                    [--buildtype=<type>] [--cflags="<flag1> <flag2>..."]'
    echo '                    [--clibs="<lib1> <lib2>..."] [--hdf5dir=<dir>]'
    echo '                    [--hdf5inc=<dir>] [--hdf5lib=<dir>]'
    echo 'Options:'
    echo '    -h,--help           Print this message and exit'
    echo '    -l,--license        Print license information and exit'
    echo '    -r,--reconfigure    Force overwrite of previous configuration'
    echo '    -s,--silent         Generate a less verbose Makefile'
    echo '    --noomp             Disables OpenMP flags when linking unit tests'
    echo '    --nohdf5            Disables HDF5; for now this means no tabulated EOS'
    echo '    --prefix            Installation directory'
    echo '    --builddir          Build directory (default build)'
    echo '    --buildtype         Build type (default debug-opt). Supported values:'
    echo '                          <type>     : compiler flags'
    echo '                          -----------:---------------'
    echo '                          nocflags   : None'
    echo '                          debug      : -Wall -std=c99 -O0 -g'
    echo '                          debug-opt  : -Wall -std=c99 -march=native -O2 -g'
    echo '                          opt        : -Wall -std=c99 -march=native -O2'
    echo '                          production : -Wall -std=c99 -march=native -O3'
    echo '    --cflags            Additional compilation flags'
    echo '    --clibs             Additional linker flags'
    echo '    --hdf5dir           Sets the HDF5 base directory. Possible values:'
    echo '                          <dir> : assumes <dir>/include and <dir>/lib exist'
    echo '                                  (see --hdf5inc and --hdf5lib if not)'
    echo '    --hdf5inc           Sets the path to the HDF5 include directory'
    echo '    --hdf5lib           Sets the path to the HDF5 lib directory'
}

check_command()
{
    printf "Checking if command $1 exists... "
    tmp_=$(command -v $1)
    if [ "$tmp_" = "" ]; then
        NO
        eval have_$(printf $1 | tr - _)=0
        return 0
    else
        YES $tmp_
        eval have_$(printf $1 | tr - _)=1
        return 1
    fi
}

check_compiler()
{
    printf "Checking if compiler $1 exists... "
    tmp_=$(command -v $1)
    if [ "$tmp_" = "" ]; then
        NO
    else
        CC=$1
        YES "$tmp_"
    fi
}

c_compiles()
{
    printf "$5"
    printf "$1" | $2 $3 -x c - $4 >/dev/null 2>&1
    if [ $? -eq 0 ]; then
        YES "$2$3<objs>$4"
        rm -f a.out
        return 0
    else
        NO "$2$3<objs>$4"
        rm -f a.out
        return 1
    fi
}

Realpath()
{
    echo $(cd $(dirname $1); pwd)/$(basename $1) | \
        awk '{gsub(/\/\.\./, "", $0); gsub(/\/\./, "", $0); print}'
}

NL='
'
probe_file()
{
    # Source: https://stackoverflow.com/questions/10346816
    tmp_=$(find $1 2>/dev/null | grep -F $2)
    # Source: https://unix.stackexchange.com/questions/276834
    case $tmp_ in
             "") return 1;;
        *"$NL"*) return 2;;
              *) return 0;;
    esac
}

set_hdf5()
{
    for dir in $1 $2; do
        if [ ! -d $dir ]; then
            error "Directory $dir not found"
        fi
    done
    printf "Checking if hdf5.h can be found in $1... "
    probe_file $1/ hdf5.h
    err=$?
    if [ $err -ne 0 ]; then
        case $err in
            1) NO;;
            2) printf "\nFound multiple hdf5.h files:\n"
               printf "$tmp_\n"
               printf "Please specify the desired one using the --hdf5dir, --hdf5inc,\n"
               printf "and/or --hdf5lib options. Run ./configure -h for further details.\n";;
        esac
        return $err
    else
        YES "$tmp_"
        cflags="$cflags -I$(dirname $tmp_)"
    fi
    for f in $hdf5libfiles; do
        printf "Checking if $f can be found in $2... "
        probe_file $2/ $f
        if [ $? -ne 0 ]; then
            NO;
            if [ "$f" = "libhdf5.a" ]; then
                return 1;
            fi
        else
            YES "$tmp_"
            clibs="$clibs -L$(dirname $tmp_) -lhdf5"
            break
        fi
    done
    return 0
}

silent=0
reconfigure=0
prefix="/usr/local"
buildtype="debug-opt"
builddir="build"
ompcflag=" -fopenmp"
usehdf5=1
cflags=""
clibs=""
hdf5dir=""
hdf5inc=""
hdf5lib=""

while [ $# -gt 0 ]; do
    case $1 in
        -h|--help) help_message; exit;;
        -l|--license)
            if [ -f LICENSE ]; then
                cat LICENSE; exit
            else
                printf "License file (LICENSE) does not exist\n"; exit
            fi
            ;;
        -r|--reconfigure) reconfigure=1;;
        -s|--silent) silent=1;;
        --noomp) ompcflag="";;
        --nohdf5) usehdf5=0;;
        --prefix=*) prefix=$(echo "$1" | cut -d= -f2);;
        --buildtype=*) buildtype=$(echo "$1" | cut -d= -f2);;
        --builddir=*) builddir=$(echo "$1" | cut -d= -f2);;
        --cflags=*) cflags=$(echo "$1" | cut -d= -f2);;
        --clibs=*) clibs=$(echo "$1" | cut -d= -f2);;
        --hdf5dir=*) hdf5dir=$(echo "$1" | cut -d= -f2);;
        --hdf5inc=*) hdf5inc=$(echo "$1" | cut -d= -f2);;
        --hdf5lib=*) hdf5lib=$(echo "$1" | cut -d= -f2);;
        --prefix) prefix=$2; shift;;
        --buildtype) buildtype=$2; shift;;
        --builddir) builddir=$2; shift;;
        --cflags) cflags=$2; shift;;
        --clibs) clibs=$2; shift;;
        --hdf5dir) hdf5dir=$2; shift;;
        --hdf5inc) hdf5inc=$2; shift;;
        --hdf5lib) hdf5lib=$2; shift;;
        --) shift; break;;
        -*)
            opt=$1
            opt_length=$(echo "$opt" | awk '{print length}')
            for i in $(seq 2 "$opt_length"); do
                char=$(echo "$opt" | cut -c"$i")
                case $char in
                    h) help_message; exit;;
                    l)
                        if [ -f LICENSE ]; then
                            cat LICENSE; exit
                        else
                            printf "License file (LICENSE) does not exist\n"; exit
                        fi
                        ;;
                    r) reconfigure=1;;
                    s) silent=1;;
                    *) echo "Warning: ignoring unknown option: $char";;
                esac
            done
            ;;
        *) echo "Warning: ignoring unknown option: $1";;
    esac
    shift
done

if [ -f $builddir/.check ] && [ $reconfigure -eq 0 ]; then
    printf "Build directory '$builddir' exists. Stopping configuration.\n"
    printf "Run with -r or --reconfigure to force a new configuration.\n"
    exit 1
fi

printf "Beginning configuration script for $pkg...\n"
printf "Detecting system... "
unames=$(uname -s)
case $unames in
    Linux)
        printf "%s\n" $(green "$unames")
        hdf5libfiles="libhdf5.so libhdf5.a"
        sharedext=".so"
        break;;
    Darwin)
        printf "%s\n" $(green "$unames")
        hdf5libfiles="libhdf5.dylib libhdf5.a"
        sharedext=".dylib"
        break;;
    *)
        printf "Unsupported system %s\n" $(red "$unames")
        exit 1;;
esac

check_command grep
check_command awk
if [ $have_awk -eq 0 ]; then
    printf "awk is required by the build system. Cannot proceed.\n"
    exit 1
fi

prefix=$(Realpath $prefix)

printf "Checking if build type is valid... "
case $buildtype in
         plain) break;;
         debug) BUILDCFLAGS="-Wall -std=c99 -O0 -g"; break;;
     debug-opt) BUILDCFLAGS="-Wall -std=c99 -march=native -O2 -g"; break;;
           opt) BUILDCFLAGS="-Wall -std=c99 -march=native -O2"; break;;
    production) BUILDCFLAGS="-Wall -std=c99 -march=native -O3"; break;;
             *) printf "%s\nUnsupported built type, use ./configure -h for help\n" $(red $buildtype)
                exit 1;;
esac
YES "buildtype: $buildtype; build flags: $BUILDCFLAGS"

printf "Checking if cflags were provided... "
if [ "$cflags" = "" ]; then
    green "NO\n"
else
    YES "$cflags"
fi
cflags="$BUILDCFLAGS $cflags"

printf "Checking if clibs were provided... "
if [ "$clibs" = "" ]; then
    green "NO\n"
else
    YES "$clibs"
fi

for compiler in gcc clang icc icx cc; do
    if [ -z $CC ]; then
        check_compiler $compiler
    else
        break
    fi
done

clibs=$(printf "%s" "-lm $clibs" | awk '{sub(/ *$/, "", $0); print}')

c_compiles "int main() { return 0; }" $CC " -O0 " "" "Checking if C compiler works... "
code='
#include <stdio.h>
#include <math.h>

int main() {
  printf("%%.15e\\n", cos(2.3456));
  return 0;
}
'
c_compiles "$code" $CC " -O0 " " -lm" "Checking if compiler works with -lm linker flag... "
if [ $? -ne 0 ]; then
    error "The C compiler does not work with libm\n"
fi
c_compiles "$code" $CC " $cflags " " $clibs" "Checking if compiler works with build flags... "
if [ $? -ne 0 ]; then
    error "The C compiler does not work with the build flags\n"
fi
if [ "$ompcflag" != "" ]; then
    code='
#include <stdio.h>
#include <omp.h>
int main() {
  #pragma omp parallel
  {
    printf("Hello, world!\\n");
  }
  return 0;
}
'
    c_compiles "$code" $CC " -O0$ompcflag " " $clibs" "Checking if compiler works with$ompcflag flag... "
    if [ $? -ne 0 ]; then
        printf "Disabling OpenMP\n"
        ompcflag=""
    fi
fi

if [ $usehdf5 -eq 1 ]; then
    if [ "$hdf5dir" = "" ]; then
        if [ "$hdf5inc" = "" ] && [ "$hdf5lib" = "" ]; then
            check_command pkg-config
            if [ $have_pkg_config -eq 1 ]; then
                printf "Checking if hdf5 library is available with pkg-config... "
                hdf5inc=$(pkg-config hdf5 --cflags 2>/dev/null)
                hdf5lib=$(pkg-config hdf5 --libs --static 2>/dev/null)
                if [ "$hdf5inc" != "" ] && [ "$hdf5lib" != "" ]; then
                    YES
                    cflags="$cflags $hdf5inc"
                    clibs="$clibs $hdf5lib"
                else
                    NO
                    red "ERROR: "
                    printf "HDF5 not found with pkg-config\n"
                    printf "Please use ./configure -h for instructions on how to manually\n"
                    printf "specify your HDF5 installation path or disable HDF5\n"
                    exit 1
                fi
            fi
        elif [ "$hdf5inc" = "" ] || [ "$hdf5lib" = "" ]; then
            error "For custom HDF5 paths, both --hdf5inc and --hdf5lib must be given\n"
        else
            set_hdf5 "$hdf5inc" "$hdf5lib"
            if [ $? -ne 0 ]; then
                error "HDF5 not found"
            fi
        fi
    else
        if [ ! -d $hdf5dir ]; then
            error "HDF5 directory $hdf5dir does not exist"
        fi
        set_hdf5 "${hdf5dir}/include" "${hdf5dir}/lib"
        if [ $? -ne 0 ]; then
            error "HDF5 not found"
        fi
    fi
    # Courtesy ChatGPT (comments removed)
    code='
#include <stdio.h>
#include <stdlib.h>
#include "hdf5.h"

int main() {
  hid_t file_id, dataset_id, dataspace_id;
  herr_t status;
  file_id = H5Fopen("test.h5", H5F_ACC_RDONLY, H5P_DEFAULT);
  if (file_id < 0) {
    fprintf(stderr, "Failed to open HDF5 file!\\n");
    exit(1);
  }
  dataset_id = H5Dopen2(file_id, "test_dataset", H5P_DEFAULT);
  if (dataset_id < 0) {
    fprintf(stderr, "Failed to open HDF5 dataset!\\n");
    exit(1);
  }
  dataspace_id = H5Dget_space(dataset_id);
  if (H5Sget_simple_extent_ndims(dataspace_id) != 2) {
    fprintf(stderr, "Unexpected dataspace rank!\\n");
    exit(1);
  }
  hsize_t dims[2];
  status = H5Sget_simple_extent_dims(dataspace_id, dims, NULL);
  if (status < 0 || dims[0] != 5 || dims[1] != 10) {
    fprintf(stderr, "Unexpected dataspace dimensions!\\n");
    exit(1);
  }
  status = H5Dclose(dataset_id);
  status = H5Fclose(file_id);
  printf("HDF5 installation is OK!\\n");
  return 0;
}
'
    c_compiles "$code" $CC " $cflags " " $clibs" "Checking if compiler works with hdf5... "
    if [ $? -ne 0 ]; then
        msg="C compiler does not work with hdf5. Use ./configure --nohdf5 to disable hdf5 or
       run ./configure -h for more information on how to specify your hdf5 installation."
        error "$msg"
    fi
    cflags="$cflags -DUSE_HDF5"
fi

parse_mcd()
{
    name=$(printf $2 | awk '{n=split($0, arr, "/"); print arr[n]}')
    if [ "$3" = "0" ]; then
        printf "$1- %s\n" $(blue $name)
    elif [ "$3" = "1" ]; then
        mkdir -p $(printf $2 | awk -v bd=$builddir '{sub(/^GRHayL\//, "", $0); printf("%s/%s", bd, $0)}')
        printf "$1- %s\n" $(green $name)
    else
        mkdir -p $(printf $2 | awk -v bd=$builddir '{sub(/^GRHayL\//, "", $0); printf("%s/%s", bd, $0)}')
        printf "$1- $name\n"
    fi
    file="$2/make.code.defn"
    if [ ! -f $file ]; then
        error "Fille $file not found"
    fi
    for sd in $(./scripts/parser awk $file "subdirs"); do
        sdsrcs=$(./scripts/parser awk "$2/$sd/make.code.defn" "sources")
        sdincs=$(./scripts/parser awk "$2/$sd/make.code.defn" "headers")
        sdihds=$(./scripts/parser awk "$2/$sd/make.code.defn" "install_headers")
        srcs="$srcs $sdsrcs"
        incs="$incs $sdincs"
        ihds="$ihds $sdihds"
        parse_mcd "$1  " $2/$sd $(($3+1))
    done
}

printf "Creating build directory tree (build directory: $builddir):\n"
count=0
srcs=""
incs=""
ihds=""
parse_mcd "  " "GRHayL" 0
printf "Symlinking header files in GRHayL/include to $builddir/include... "
rm -f $builddir/include/*
ln -s `pwd`/GRHayL/include/*.h $builddir/include
green "DONE\n"
printf "Creating directory $builddir/lib... "
mkdir -p $builddir/lib
green "DONE\n"
printf "Auto-generated by GRHayL's configuration script\n" > $builddir/.check

# Sanitize all white space (not really necessary)
cflags=$(printf "%s" "$cflags" | awk '{gsub(/  */, " ", $0); sub(/^ */, "", $0); sub(/ $/, "", $0); print}')
clibs=$(printf "%s" "$clibs" | awk '{gsub(/  */, " ", $0); sub(/^ */, "", $0); sub(/ $/, "", $0); print}')
srcs=$(printf "$srcs" | awk '{gsub(/  */, " ", $0); sub(/^ */, "", $0); sub(/ $/, "", $0); print}')
incs=$(printf "$incs" | awk '{gsub(/  */, " ", $0); sub(/^ */, "", $0); sub(/ $/, "", $0); print}')
ihds=$(printf "$ihds" | awk '{gsub(/  */, " ", $0); sub(/^ */, "", $0); sub(/ $/, "", $0); print}')
objs=$(printf "$srcs" | awk -v bd=$builddir '{gsub("GRHayL/", sprintf("%s/", bd), $0); gsub(/\.c/, ".o", $0); print}')
tests=$(find Unit_Tests -name unit_test_*.c)
if [ "$tests" = "" ]; then
    tnames="None"
else
    tnames=$(printf "$tests" | sort | \
                awk '{
  split($0, a, "/")
  sub(/^unit_test_/, "", a[2])
  sub(/\.c/, "", a[2])
  if( NR == 1 )
    print "-", a[2]
  else
    printf("%26s- %s\n", " ", a[2])
}
END { print tests }
')
    tests=$(echo $tests)
    tsrcs=$(echo $(find Unit_Tests -name *.c ! -name unit_test_*.c))
    tobjs=$(printf "$tsrcs" | awk '{
    gsub(/\.c/, ".o", $0)
    for(i=1;i<=NF;i++) {
      tobjs=sprintf("%s%s%s ", tobjs, "build/", $i)
    }
    print tobjs
}')
    texes=$(printf "$tests" | awk '{ gsub(/\.c/, "", $0); gsub(/Unit_Tests\//, "test/", $0); print }')
    texeobjs=$(printf "$tests" | awk '{ gsub(/\.c/, ".o", $0); gsub(/Unit_Tests\//, "build/Unit_Tests/", $0); print }')
    mkdir -p $builddir/Unit_Tests test
fi

printf "Generating Makefile... "
rm -f Makefile
printf "# Makefile automatically generated by $pkg's configure script\n" > Makefile
printf "PREFIX       = $prefix\n"                                       >> Makefile
printf "BUILDDIR     = $builddir\n"                                     >> Makefile
printf "LIBSOV       = lib${libname}_${pkg_version}$sharedext\n"        >> Makefile
printf "LIBSO        = lib$libname$sharedext\n"                         >> Makefile
printf 'BUILDLIBSOV  = $(BUILDDIR)/lib/$(LIBSOV)\n'                     >> Makefile
printf 'BUILDLIBSO   = $(BUILDDIR)/lib/$(LIBSO)\n'                      >> Makefile
printf 'PREFIXLIBSOV = $(PREFIX)/lib/$(LIBSOV)\n'                       >> Makefile
printf 'PREFIXLIBSO  = $(PREFIX)/lib/$(LIBSO)\n'                        >> Makefile
printf "CC           = $CC\n"                                           >> Makefile
printf "CFLAGS       = $cflags -I./GRHayL/include\n"                    >> Makefile
printf "CCOMPILE     = \$(CC) \$(CFLAGS)\n"                             >> Makefile
printf "CCOMPILEOMP  = \$(CC) \$(CFLAGS)$ompcflag\n"                    >> Makefile
printf "LD_FLAGS     = $clibs\n"                                        >> Makefile
printf "SRC          = $srcs\n"                                         >> Makefile
printf "OBJ          = $objs\n"                                         >> Makefile
printf "INCS         = $incs\n"                                         >> Makefile
printf "IHDS         = $ihds\n"                                         >> Makefile
printf 'INC         := $(INCS) $(IHDS)\n'                               >> Makefile
printf 'LIBS         = $(BUILDLIBSO)\n'                                 >> Makefile
if [ "$tests" != "" ]; then
    printf "TEXES    = $texes\n"      >> Makefile
    printf "TOBJS    = $tobjs\n"      >> Makefile
    printf "TEXEOBJS = $texeobjs\n\n" >> Makefile
fi
printf '\nall: grhayl tests\n\t@echo "All done!"\n\n' >> Makefile
printf 'grhayl: $(LIBS)\n\n'                          >> Makefile
printf 'tests: $(TEXES)\n\n'                          >> Makefile
if [ $silent -eq 0 ]; then
    printf '$(BUILDLIBSO): $(BUILDLIBSOV)\n'                                         >> Makefile
    printf '\trm -f $(BUILDLIBSO) && ln -s $(LIBSOV) $(BUILDLIBSO)\n\n'              >> Makefile
    printf '$(BUILDLIBSOV): $(OBJ)\n'                                                >> Makefile
    printf '\t$(CCOMPILE) -fPIC -shared $(OBJ) -o $@ $(LD_FLAGS)\n\n'                >> Makefile
    printf '$(OBJ): $(BUILDDIR)/%%.o : GRHayL/%%.c $(INC)\n'                         >> Makefile
    printf '\t$(CCOMPILE) -fPIC -c $< -o $@\n\n'                                     >> Makefile
    printf 'clean:\n\trm -f $(OBJ) $(TEXES) $(TOBJS) $(BUILDLIBSO) $(BUILDLIBSOV)\n' >> Makefile
    printf 'realclean: clean\n\trm -rf $(BUILDDIR)\n\trm -f Makefile\n\n'            >> Makefile
    if [ "$tests" != "" ]; then
        printf '$(TEXES): test/%%: $(BUILDDIR)/Unit_Tests/%%.o $(TOBJS) $(LIBS)\n'             >> Makefile
        printf '\t$(CCOMPILEOMP) $(TOBJS) $< -o $@ $(LD_FLAGS) -L$(BUILDDIR)/lib -lgrhayl\n\n' >> Makefile
        printf '$(TOBJS): $(BUILDDIR)/%%.o: %%.c\n'                                            >> Makefile
        printf '\t$(CCOMPILEOMP) -c $< -o $@\n\n'                                              >> Makefile
        printf '$(TEXEOBJS): $(BUILDDIR)/%%.o: %%.c\n'                                         >> Makefile
        printf '\t$(CCOMPILEOMP) -c $< -o $@\n\n'                                              >> Makefile
    fi
else
    printf '$(BUILDLIBSO): $(BUILDLIBSOV)\n'                             >> Makefile
    printf '\t@echo "Creating symlink to $@"\n'                          >> Makefile
    printf '\t@rm -f $(BUILDLIBSO) && ln -s $(LIBSOV) $(BUILDLIBSO)\n\n' >> Makefile
    printf '$(BUILDLIBSOV): $(OBJ)\n'                                    >> Makefile
    printf '\t@echo "Linking GRHayL shared library"\n'                   >> Makefile
    printf '\t@$(CCOMPILE) -fPIC -shared $(OBJ) -o $@ $(LD_FLAGS)\n\n'   >> Makefile
    printf '$(OBJ): $(BUILDDIR)/%%.o : GRHayL/%%.c $(INC)\n'             >> Makefile
    printf '\t@echo "Compiling $<"\n'                                    >> Makefile
    printf '\t@$(CCOMPILE) -fPIC -c $< -o $@\n\n'                        >> Makefile
    printf 'clean:\n\t@echo "Removing object files"\n'                   >> Makefile
    printf '\t@rm -f $(OBJ)\n'                                           >> Makefile
    printf '\t@echo "Removing library files"\n'                          >> Makefile
    printf '\t@rm -f $(BUILDLIBSO) $(BUILDLIBSOV)\n'                     >> Makefile
    printf '\t@echo "Removing unit tests"\n'                             >> Makefile
    printf '\t@rm -f $(TEXES) $(TOBJS)\n\n'                              >> Makefile
    printf 'realclean: clean\n\t@echo "Removing build directory"\n'      >> Makefile
    printf '\t@rm -rf $(BUILDDIR)\n'                                     >> Makefile
    printf '\t@echo "Removing Makefile"\n'                               >> Makefile
    printf '\t@rm -f Makefile\n\n'                                       >> Makefile
    if [ "$tests" != "" ]; then
        printf '$(TEXES): test/%%: $(BUILDDIR)/Unit_Tests/%%.o $(TOBJS) $(LIBS)\n'              >> Makefile
        printf '\t@echo "Linking $@"\n'                                                         >> Makefile
        printf '\t@$(CCOMPILEOMP) $(TOBJS) $< -o $@ $(LD_FLAGS) -L$(BUILDDIR)/lib -lgrhayl\n\n' >> Makefile
        printf '$(TOBJS): $(BUILDDIR)/%%.o: %%.c\n'                                             >> Makefile
        printf '\t@echo "Compiling $<"\n'                                                       >> Makefile
        printf '\t@$(CCOMPILEOMP) -c $< -o $@\n\n'                                              >> Makefile
        printf '$(TEXEOBJS): $(BUILDDIR)/%%.o: %%.c\n'                                          >> Makefile
        printf '\t@echo "Compiling $<"\n'                                                       >> Makefile
        printf '\t@$(CCOMPILEOMP) -c $< -o $@\n\n'                                              >> Makefile
    fi
fi
printf 'install: grhayl\n'                                                     >> Makefile
printf '\t@echo "Installing GRHayL in $(PREFIX)..."\n'                         >> Makefile
printf '\t@echo "Installing GRHayL headers in $(PREFIX)/include/grhayl"\n'     >> Makefile
printf '\t@mkdir -p $(PREFIX)/include/grhayl\n'                                >> Makefile
printf '\t@cp $(IHDS) $(PREFIX)/include/grhayl\n'                              >> Makefile
printf '\t@echo "Installing GRHayL libraries in $(PREFIX)/lib"\n'              >> Makefile
printf '\t@mkdir -p $(PREFIX)/lib\n'                                           >> Makefile
printf '\t@cp -a $(BUILDDIR)/lib/* $(PREFIX)/lib\n\n'                          >> Makefile
printf 'uninstall:\n'                                                          >> Makefile
printf '\t@echo "Uninstalling GRHayL from $(PREFIX)..."\n'                     >> Makefile
printf '\t@echo "Uninstalling GRHayL headers from $(PREFIX)/include/grhayl"\n' >> Makefile
printf '\t@rm -rf $(PREFIX)/include/grhayl\n'                                  >> Makefile
printf '\t@echo "Uninstalling GRHayL libraries from $(PREFIX)/lib"\n'          >> Makefile
printf '\t@rm -rf $(PREFIXLIBSO) $(PREFIXLIBSOV)\n\n'                          >> Makefile
green "DONE\n"

tmp=$(printf "$pkg_short configuration finished successfully")
sep=$(printf "%*s" "${#tmp}" " " | tr " " -)
printf "%s\n" $sep
printf "$tmp\n\n"
printf "%2sConfiguration information\n" " "
printf "%2s-------------------------\n" " "
printf "%4s%-19s : %s\n" " " "Version" $pkg_version
printf "%4s%-19s : %s\n" " " "Installation prefix" $prefix
printf "%4s%-19s : %s\n" " " "Build directory" $(Realpath $builddir)
printf "%4s%-19s : %s\n" " " "Build type" $buildtype
printf "%4s%-19s : %s\n" " " "C compiler flags" "$cflags"
printf "%4s%-19s : %s\n" " " "C linking flags" "$clibs"
if [ "$ompcflag" = "" ]; then
    printf "%4s%-19s : %s\n" " " "OpenMP unit tests" "No"
else
    printf "%4s%-19s : %s\n" " " "OpenMP unit tests" "Yes"
fi
if [ $silent -eq 0 ]; then
    printf "%4s%-19s : %s\n" " " "Silent Makefile" "No"
else
    printf "%4s%-19s : %s\n" " " "Silent Makefile" "Yes"
fi
if [ $usehdf5 -eq 0 ]; then
    printf "%4s%-19s : %s\n" " " "HDF5 support" "No"
else
    printf "%4s%-19s : %s\n" " " "HDF5 support" "Yes"
fi
printf "%4s%-19s : " " " "Gems found"
./scripts/parser awk "GRHayL/make.code.defn" "subdirs" | awk '{sub(/include /, "", $0); print}'
printf "%4s%-19s : %s\n" " " "Unit tests found" "$tnames"
printf "%s\n" $sep
