#!/bin/sh

pkg="GRHayL"
pkg_short="GRHayL"
pkg_version="1.0.0"

green()
{
    printf "\033[1m\033[32m$1\033[0m"
}

red()
{
    printf "\033[1m\033[31m$1\033[0m"
}

YES()
{
    green "YES"
    if [ $# -eq 1 ]; then
        printf " ($1)\n"
    else
        printf "\n"
    fi
}

NO()
{
    red "NO"
    if [ $# -eq 1 ]; then
        printf " ($1)\n"
    else
        printf "\n"
    fi
}

help_message()
{
    echo "This is the configuration script for $pkg."
    echo "Syntax: ./configure [-h,--help] [--license] [--prefix=<dir>]"
    echo "                    [--buildtype=<type>] [--nohdf5] [--hdf5dir=<dir>]"
    echo "                    [--hdf5inc=<dir>] [--hdf5lib=<dir>]"
    echo "options:"
    echo "    -h, --help    Print this message and exit"
    echo "    --license     Print license information and exit"
    echo "    --prefix      Installation directory"
    echo "    --buildtype   Build type (default debug-opt). Supported values:"
    echo "                    type       : compiler flags added to CFLAGS"
    echo "                    plain      : None"
    echo "                    debug      : -Wall -std=c99 -O0 -g"
    echo "                    debug-opt  : -Wall -std=c99 -march=native -O2 -g"
    echo "                    opt        : -Wall -std=c99 -march=native -O2"
    echo "                    production : -Wall -std=c99 -march=native -O3"
    echo "    --nohdf5      Disables HDF5; for now this means no tabulated EOS."
    echo "    --hdf5dir     Sets the HDF5 base directory. Possible values:"
    echo "                    <dir> : assumes <dir>/include and <dir>/lib exist"
    echo "                            (see --hdf5inc and --hdf5lib if not)"
    echo "    --hdf5inc     Sets the path to the HDF5 include directory"
    echo "    --hdf5lib     Sets the path to the HDF5 lib directory"
}

check_command()
{
    printf "Checking if command $1 exists... "
    tmp_=$(command -v $1)
    if [ "$tmp_" = "" ]; then
        NO
        eval have_$(printf $1 | tr - _)=0
    else
        YES $tmp_
        eval have_$(printf $1 | tr - _)=1
    fi
}

check_compiler()
{
    printf "Checking if compiler $1 exists... "
    tmp_=$(command -v $1)
    if [ "$tmp_" = "" ]; then
        NO
    else
        CC=$1
        YES "$tmp_"
    fi
}

c_compiles()
{
    code=$1
    c_compiler=$2
    cflags=$3
    libs=$4
    msg=$5
    printf "$msg"
    printf "$code" | $c_compiler $cflags -x c - $libs
    rm -f a.out
    if [ $? -eq 0 ]; then
        YES "$c_compiler$cflags<objs>$libs"
    else
        NO "$c_compiler$cflags<objs>$libs"
        exit 1
    fi
}

NL='
'
probe_file()
{
    # Source: https://stackoverflow.com/questions/10346816
    tmp_=$(find $1 2>/dev/null | grep -F $2)
    # Source: https://unix.stackexchange.com/questions/276834
    case $tmp_ in
             "") return 1;;
        *"$NL"*) return 2;;
              *) return 0;;
    esac
}

set_hdf5()
{
    printf "Checking if hdf5.h can be found in $1... "
    probe_file $1 hdf5.h
    err=$?
    if [ $err -ne 0 ]; then
        case $err in
            1) NO;;
            2) printf "\nFound multiple hdf5.h files:\n"
               printf "$tmp_\n"
               printf "Please specify the desired one using the --hdf5dir, --hdf5inc,\n"
               printf "and/or --hdf5lib options. Run ./configure -h for further details.\n";;
        esac
        return $err
    else
        YES "$tmp_"
        CFLAGS="$CFLAGS -I$(dirname $tmp_)"
    fi
    for f in $hdf5libfiles; do
        printf "Checking if $f can be found in $2... "
        probe_file $2 $f
        if [ $? -ne 0 ]; then
            NO;
            if [ "$f" = "libhdf5.a" ]; then
                return 1;
            fi
        else
            YES "$tmp_"
            LD_FLAGS="$LD_FLAGS -L$(dirname $tmp_) -lhdf5"
            break
        fi
    done
    return 0
}

# Source: https://www.baeldung.com/linux/bash-parse-command-line-arguments
VALID_ARGS=$(getopt -o hl --long help,license,nohdf5,prefix:,hdf5dir:,hdf5inc:,hdf5lib:,buildtype: -- "$@")
if [ $? -ne 0 ]; then
    help_message
    exit 1
fi

# Set defaults
prefix="/usr/local"
buildtype="debug-opt"
withhdf5=1
hdf5dir=""
hdf5inc=""
hdf5lib=""

if [ "$VALID_ARGS" != " --" ]; then
   eval set -- "$VALID_ARGS"
   while [ : ]; do
       case "$1" in
           -h | --help) help_message; exit;;
           -l | --license)
               if [ -f LICENSE ]; then
                   cat LICENSE; exit
               else
                   printf "License file (LICENSE) does not exist\n"; exit
               fi
               ;;
           --prefix) prefix=$2; shift 2;;
           --buildtype) buildtype=$2; shift 2;;
           --nohdf5) withhdf5=0; shift 1;;
           --hdf5dir) hdf5dir=$2; shift 2;;
           --hdf5inc) hdf5inc=$2; shift 2;;
           --hdf5lib) hdf5lib=$2; shift 2;;
           --) shift; break;;
       esac
   done
fi

printf "Beginning configuration script for $pkg...\n"
printf "Detecting system... "
unames=$(uname -s)
case $unames in
    Linux)
        printf "%s\n" $(green "$unames")
        hdf5libfiles="libhdf5.so libhdf5.a"
        break;;
    Darwin)
        printf "%s\n" $(green "$unames")
        hdf5libfiles="libhdf5.dylib libhdf5.a"
        break;;
    *)
        printf "Unsupported system %s\n" $(red "$unames")
        exit 1;;
esac

printf "Checking build type... "
case $buildtype in
         plain) break;;
         debug) BUILDCFLAGS="-Wall -std=c99 -O0 -g"; break;;
     debug-opt) BUILDCFLAGS="-Wall -std=c99 -march=native -O2 -g"; break;;
           opt) BUILDCFLAGS="-Wall -std=c99 -march=native -O2"; break;;
    production) BUILDCFLAGS="-Wall -std=c99 -march=native -O3"; break;;
             *) printf "%s\nUnsupported built type, use ./configure -h for help\n" $(red $buildtype)
                exit 1;;
esac
printf "%s (build flags: $BUILDCFLAGS)\n" $(green $buildtype)
CFLAGS="$CFLAGS $BUILDCFLAGS"
LD_FLAGS="$LD_FLAGS -lm"

check_command grep
check_command sed
if [ $have_sed -eq 1 ]; then
    SED=sed
else
    check_command gsed
    if [ $have_gsed -eq 1 ]; then
        SED=gsed
        have_sed=1
    else
        check_command awk
        if [ $have_awk -eq 1 ]; then
            AWK=awk
        else
            check_command gawk
            if [ $have_gawk -eq 1 ]; then
                AWK = gawk
                have_awk=1
            fi
        fi
    fi
fi

# Check for a valid C compiler
for compiler in gcc clang icc icx cc; do
    if [ -z $CC ]; then
        check_compiler $compiler
    else
        break
    fi
done

# Check if C compiler works
c_compiles "int main() { return 0; }" $CC " -O0 " "" "Checking if C compiler works... "
code='
#include <stdio.h>
#include <math.h>

int main() {
  printf("%%.15e\\n", cos(2.3456));
  return 0;
}
'
c_compiles "$code" $CC " -O0 " " -lm" "Checking if compiler works with -lm linker flag... "
c_compiles "$code" $CC " $CFLAGS " " $LD_FLAGS" "Checking if compiler works with build flags... "

if [ $withhdf5 -eq 1 ]; then
    if [ "$hdf5dir" = "" ]; then
        if [ "$hdf5inc" = "" ] && [ "$hdf5lib" = "" ]; then
            check_command pkg-config
            if [ $have_pkg_config -eq 1 ]; then
                printf "Checking if hdf5 library is available with pkg-config... "
                hdf5inc=$(pkg-config hdf5 --cflags 2>/dev/null)
                hdf5lib=$(pkg-config hdf5 --libs --static 2>/dev/null)
                if [ "$hdf5inc" != "" ] && [ "$hdf5lib" != "" ]; then
                    printf "\033[1m\033[32mYES\033[0m\n"
                    have_hdf5=1
                    CFLAGS="$CFLAGS $hdf5inc"
                    LD_FLAGS="$LD_FLAGS $hdf5lib"
                else
                    printf "\033[1m\033[31mNO\033[0m\n"
                    have_hdf5=0
                fi
            fi
            if [ $have_hdf5 -eq 0 ]; then
                for d in /opt /etc /usr/local/Cellar /usr/local /usr; do
                    if [ ! -d $d ]; then
                        continue
                    fi
                    set_hdf5 $d $d
                    err=$?
                    case $err in
                        0) break;;
                        1) continue;;
                        2) exit 2;;
                    esac
                done
                if [ $err -ne 0 ]; then
                    printf "Error: HDF5 not found\n"
                    exit 1
                fi
            fi
        elif [ "$hdf5inc" = "" ] || [ "$hdf5lib" = "" ]; then
            printf "For custom HDF5 paths, both --hdf5inc and --hdf5lib must be given\n"
            exit 1
        else
            set_hdf5 "$hdf5inc" "$hdf5lib"
            if [ $? -ne 0 ]; then
                exit 1
            fi
        fi
    else
        if [ ! -d $hdf5dir ]; then
            printf "Error: HDF5 directory $hdf5dir does not exist\n"
            exit 1
        fi
        set_hdf5 "${hdf5dir}/include" "${hdf5dir}/lib"
        if [ $? -ne 0 ]; then
            printf "Error: HDF5 not found\n"
            exit 1
        fi
    fi
    # Courtesy ChatGPT (comments removed)
    code='
#include <stdio.h>
#include <stdlib.h>
#include "hdf5.h"

int main() {
  hid_t file_id, dataset_id, dataspace_id;
  herr_t status;
  file_id = H5Fopen("test.h5", H5F_ACC_RDONLY, H5P_DEFAULT);
  if (file_id < 0) {
    fprintf(stderr, "Failed to open HDF5 file!\\n");
    exit(1);
  }
  dataset_id = H5Dopen2(file_id, "test_dataset", H5P_DEFAULT);
  if (dataset_id < 0) {
    fprintf(stderr, "Failed to open HDF5 dataset!\\n");
    exit(1);
  }
  dataspace_id = H5Dget_space(dataset_id);
  if (H5Sget_simple_extent_ndims(dataspace_id) != 2) {
    fprintf(stderr, "Unexpected dataspace rank!\\n");
    exit(1);
  }
  hsize_t dims[2];
  status = H5Sget_simple_extent_dims(dataspace_id, dims, NULL);
  if (status < 0 || dims[0] != 5 || dims[1] != 10) {
    fprintf(stderr, "Unexpected dataspace dimensions!\\n");
    exit(1);
  }
  status = H5Dclose(dataset_id);
  status = H5Fclose(file_id);
  printf("HDF5 installation is OK!\\n");
  return 0;
}
'
    c_compiles "$code" $CC " $CFLAGS " " $LD_FLAGS" "Checking if compiler works with hdf5... "
fi

tmp=$(printf "$pkg_short configuration finished successfully")
sep=$(printf "%*s" "${#tmp}" " " | tr " " -)
printf "%s\n" $sep
printf "$tmp\n\n"
printf "%2sConfiguration information\n" " "
printf "%2s-------------------------\n" " "
printf "%4s%-19s : %s\n" " " "Version" $pkg_version
printf "%4s%-19s : %s\n" " " "Installation prefix" $prefix
printf "%4s%-19s : %s\n" " " "Build type" $buildtype
if [ $withhdf5 -eq 0 ]; then
    printf "%4s%-19s : %s\n" " " "HDF5 support" "No"
else
    printf "%4s%-19s : %s\n" " " "HDF5 support" "Yes"
fi
printf "%4s%-19s : %s\n" " " "Selected GEMS" "All"
printf "%s\n" $sep
