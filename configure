#!/bin/sh
#
# configure
#
# (c) 2023, Leo Werneck
#
# This is GRHayL's configure script, which is responsible for ensuring users are
# able to compile, test, and install GRHayL on different systems.

. ./config/config_functions.sh
. ./config/config_usage.sh

pkg="GRHayL"
pkg_short="GRHayL"
pkg_version="1.0.0"
libname="grhayl"

help_message() {
    cat <<EOF
This is the configuration script for GRHayL
Syntax: ./configure [-h,--help] [-l,--license] [-r,--reconfigure] [-s,--silent]
                    [--noomp] [--nohdf5] [--prefix=<dir>] [--builddir=<dir>]
                    [--buildtype=<type>] [--cflags="<flag1> <flag2>..."]
                    [--clibs="<lib1> <lib2>..."] [--hdf5dir=<dir>]
                    [--hdf5inc=<dir>] [--hdf5lib=<dir>]
Options:'
    -h,--help           Print this message and exit
    -u,--usage          Print usage information and exit
    -l,--license        Print license information and exit
    -r,--reconfigure    Force overwrite of previous configuration
    -s,--silent         Generate a less verbose Makefile
    --noomp             Disables OpenMP flags when linking unit tests
    --nohdf5            Disables HDF5; for now this means no tabulated EOS
    --prefix            Installation directory
    --builddir          Build directory (default build)
    --buildtype         Build type (default debug-opt). Supported values:
                          <type>     : compiler flags
                          -----------:---------------
                          nocflags   : None
                          debug      : -Wall -std=c99 -O0 -g
                          debug-opt  : -Wall -std=c99 -march=native -fno-finite-math-only -O2 -g
                          opt        : -Wall -std=c99 -march=native -fno-finite-math-only -O2
                          production : -Wall -std=c99 -march=native -fno-finite-math-only -O3
    --cflags            Additional compilation flags
    --clibs             Additional linker flags
    --hdf5dir           Sets the HDF5 base directory. Possible values:
                          <dir> : assumes <dir>/include and <dir>/lib exist
                                  (see --hdf5inc and --hdf5lib if not)
    --hdf5inc           Sets the path to the HDF5 include directory
    --hdf5lib           Sets the path to the HDF5 lib directory
EOF
}

silent=0
reconfigure=0
prefix="/usr/local"
buildtype="debug-opt"
builddir="build"
ompcflag=" -fopenmp"
usehdf5=1
cflags=""
clibs=""
hdf5dir=""
hdf5inc=""
hdf5lib=""

# This section uses ${1#*=} to trim arguments:
# "--prefix=/usr/local" => "/usr/local"
while [ $# -gt 0 ]; do
    case $1 in
        -h|--help) help_message; exit;;
        -u|--usage)
            case $2 in
                ubuntu) usage_ubuntu; exit;;
                mac) usage_mac; exit;;
                falcon) usage_falcon; exit;;
                sawtooth) usage_sawtooth; exit;;
                lemhi) usage_lemhi; exit;;
            esac
            usage_message; exit;;
        -l|--license)
            if [ -f LICENSE ]; then
                cat LICENSE; exit
            else
                printf "License file (LICENSE) does not exist\n"; exit
            fi
            ;;
        -r|--reconfigure) reconfigure=1;;
        -s|--silent) silent=1;;
        --noomp) ompcflag="";;
        --nohdf5) usehdf5=0;;
        --prefix=*) prefix="${1#*=}";;
        --buildtype=*) buildtype="${1#*=}";;
        --builddir=*) builddir="${1#*=}";;
        --cflags=*) cflags="${1#*=}";;
        --clibs=*) clibs="${1#*=}";;
        --hdf5dir=*) hdf5dir="${1#*=}";;
        --hdf5inc=*) hdf5inc="${1#*=}";;
        --hdf5lib=*) hdf5lib="${1#*=}";;
        --prefix) prefix=$2; shift;;
        --buildtype) buildtype=$2; shift;;
        --builddir) builddir=$2; shift;;
        --cflags) cflags=$2; shift;;
        --clibs) clibs=$2; shift;;
        --hdf5dir) hdf5dir=$2; shift;;
        --hdf5inc) hdf5inc=$2; shift;;
        --hdf5lib) hdf5lib=$2; shift;;
        --) shift; break;;
        -*)
            opt=$1
            opt_length=$(echo "$opt" | awk '{print length}')
            for i in $(seq 2 "$opt_length"); do
                char=$(echo "$opt" | cut -c"$i")
                case $char in
                    h) help_message; exit;;
                    u) usage_message; exit;;
                    l)
                        if [ -f LICENSE ]; then
                            cat LICENSE; exit
                        else
                            printf "License file (LICENSE) does not exist\n"; exit
                        fi
                        ;;
                    r) reconfigure=1;;
                    s) silent=1;;
                    *) echo "Warning: ignoring unknown option: $char";;
                esac
            done
            ;;
        *) echo "Warning: ignoring unknown option: $1";;
    esac
    shift
done

if [ -f $builddir/.check ] && [ $reconfigure -eq 0 ]; then
    printf "Build directory '$builddir' exists. Stopping configuration.\n"
    printf "Run with -r or --reconfigure to force a new configuration.\n"
    exit 1
fi

printf "Beginning configuration script for $pkg...\n"
printf "Detecting system... "
unames=$(uname -s)
case $unames in
    Linux)
        printf "%s\n" $(green "$unames")
        hdf5libfiles="libhdf5.so libhdf5.a"
        sharedext=".so"
        break;;
    Darwin)
        printf "%s\n" $(green "$unames")
        hdf5libfiles="libhdf5.dylib libhdf5.a"
        sharedext=".dylib"
        break;;
    *)
        printf "Unsupported system %s\n" $(red "$unames")
        exit 1;;
esac

check_command grep
check_command awk
if [ $have_awk -eq 0 ]; then
    printf "awk is required by the build system. Cannot proceed.\n"
    exit 1
fi

prefix=$(Realpath $prefix)

printf "Checking if build type is valid... "
case $buildtype in
         plain) BUILDCFLAGS=""; break;;
         debug) BUILDCFLAGS="-Wall -std=c99 -O0 -g"; break;;
     debug-opt) BUILDCFLAGS="-Wall -std=c99 -march=native -fno-finite-math-only -O2 -g"; break;;
           opt) BUILDCFLAGS="-Wall -std=c99 -march=native -fno-finite-math-only -O2"; break;;
    production) BUILDCFLAGS="-Wall -std=c99 -march=native -O3"; break;;
             *) printf "%s\nUnsupported built type, use ./configure -h for help\n" $(red $buildtype)
                exit 1;;
esac
YES "buildtype: $buildtype; build flags: $BUILDCFLAGS"

printf "Checking if cflags were provided... "
[ -z "$cflags" ] && green "NO\n" || YES "$cflags"
cflags="$BUILDCFLAGS $cflags"

printf "Checking if clibs were provided... "
[ -z "$clibs" ] && green "NO\n" || YES "$clibs"

for compiler in gcc clang icc icx cc; do
    if [ -z $CC ]; then
        check_compiler $compiler
    else
        break
    fi
done

# Normalize spaces and remove trailing/leading spaces
clibs=$(normalize_spaces "-lm $clibs")

# Compiler checks
c_compiles "int main() { return 0; }" $CC " -O0 " "" \
    "Checking if C compiler works... " || \
    error "The C compiler failed to compile sample code.\n"

c_compiles "$(cat config/link_test.c)" $CC " -O0 " " -lm" \
    "Checking if compiler works with -lm linker flag... " || \
    error "The C compiler does not work with libm\n"

c_compiles "$(cat config/link_test.c)" $CC " $cflags " " $clibs" \
    "Checking if compiler works with build flags... " || \
    error "The C compiler does not work with the build flags\n"

if [ -n "$ompcflag" ]; then
    if ! c_compiles "$(cat config/omp_test.c)" $CC " -O0$ompcflag " " $clibs" \
            "Checking if compiler works with$ompcflag flag... "; then
            printf "Disabling OpenMP\n"
            ompcflag=""
    fi
fi

if [ $usehdf5 -eq 0 ]; then
    cflags="$cflags -DGRHAYL_DISABLE_HDF5"
else
    if [ -z "$hdf5dir" ]; then
        if [ -z "$hdf5inc" ] && [ -z "$hdf5lib" ]; then
            check_command pkg-config
            if [ $have_pkg_config -eq 1 ]; then
                printf "Checking if hdf5 library is available with pkg-config... "
                hdf5inc=$(pkg-config hdf5 --cflags 2>/dev/null)
                hdf5lib=$(pkg-config hdf5 --libs --static 2>/dev/null)
                if [ -n "$hdf5inc" ] && [ -n "$hdf5lib" ]; then
                    YES
                    cflags="$cflags $hdf5inc"
                    clibs="$clibs $hdf5lib"
                else
                    NO
                    red "ERROR: "
                    printf "HDF5 not found with pkg-config\n"
                    printf "Please use ./configure -h for instructions on how to manually\n"
                    printf "specify your HDF5 installation path or disable HDF5\n"
                    exit 1
                fi
            fi
        elif [ -z "$hdf5inc" ] || [ -z "$hdf5lib" ]; then
            error "For custom HDF5 paths, both --hdf5inc and --hdf5lib must be given\n"
        else
            set_hdf5 "$hdf5inc" "$hdf5lib" || error "HDF5 not found"
        fi
    else
        [ ! -d $hdf5dir ] && error "HDF5 directory $hdf5dir does not exist"
        set_hdf5 "${hdf5dir}/include" "${hdf5dir}/lib" || error "HDF5 not found"
    fi
    if ! c_compiles "$(cat config/hdf5_test.c)" $CC " $cflags " " $clibs" \
       "Checking if compiler works with hdf5... "; then
        error "C compiler does not work with hdf5. Use ./configure --nohdf5 to disable hdf5 or
       run ./configure -h for more information on how to specify your hdf5 installation."
    fi
fi

printf "Creating build directory tree (build directory: $builddir):\n"
srcs="" incs="" ihds=""
parse_mcd "  " "GRHayL" 0

printf "Symlinking header files in GRHayL/include to $builddir/include... "
rm -f $builddir/include/*
ln -s "$(pwd)/GRHayL/include/"*.h "$builddir/include"
green "DONE\n"

printf "Creating directory $builddir/lib... "
mkdir -p $builddir/lib
green "DONE\n"

printf "Auto-generated by GRHayL's configuration script\n" > $builddir/.check

# Sanitize all white space (not really necessary)
cflags=$(normalize_spaces "$cflags")
clibs=$(normalize_spaces "$clibs")
srcs=$(normalize_spaces "$srcs")
incs=$(normalize_spaces "$incs")
ihds=$(normalize_spaces "$ihds")
objs=$(echo "$srcs" | awk -v bd="$builddir" '{gsub("GRHayL/", bd"/", $0); gsub(/\.c/, ".o", $0); print}')
tests=$(find Unit_Tests -maxdepth 1 -name 'unit_test_*.c')
datagen=$(find Unit_Tests/data_gen -maxdepth 1 -name 'unit_test_data_*.c')

if [ -z "$tests" ]; then
    tnames="None"
else
    tnames=$(printf "$tests" | sort | awk '
        {
          split($0, a, "/")
          sub(/^unit_test_/, "", a[2])
          sub(/\.c/, "", a[2])
          if( NR == 1 )
            print "-", a[2]
          else
            printf("%26s- %s\n", " ", a[2])
        }')
    tsrcs=$(find Unit_Tests -maxdepth 1 -name '*.c' ! -name 'unit_test_*.c')
    tobjs=$(for src in $tsrcs; do printf "build/${src%.c}.o "; done)
    texes=$(for t in $tests; do printf "${t%.c} " | sed 's|Unit_Tests/|test/|'; done)
    texeobjs=$(for t in $tests; do printf "${t%.c}.o " | sed 's|Unit_Tests/|build/Unit_Tests/|'; done)
    mkdir -p "$builddir/Unit_Tests" test
fi

if [ -z "$datagen" ]; then
    dgnames="None"
else
    dgnames=$(printf "$datagen" | sort | awk '
        {
          split($0, a, "/")
          sub(/^unit_test_data_/, "", a[3])
          sub(/\.c/, "", a[3])
          if( NR == 1 )
            print "-", a[3]
          else
            printf("%26s- %s\n", " ", a[3])
        }')
    dgsrcs=$(find Unit_Tests/data_gen -maxdepth 1 -name '*.c' ! -name 'unit_test_data_*.c')
    dgobjs=$(for src in $dgsrcs; do printf "build/${src%.c}.o "; done)
    dgexes=$(for d in $datagen; do printf "${d%.c} " | sed 's|Unit_Tests/data_gen/|test/data_gen/|'; done)
    dgexeobjs=$(for d in $datagen; do printf "${d%.c}.o " | sed 's|Unit_Tests/data_gen/|build/Unit_Tests/data_gen/|'; done)
    mkdir -p "$builddir/Unit_Tests/data_gen" test/data_gen
fi

printf "Generating Makefile... "
rm -f Makefile

append "# Makefile automatically generated by $pkg's configure script"
append "PREFIX       = $prefix"
append "BUILDDIR     = $builddir"
append "LIBSOV       = lib${libname}_${pkg_version}$sharedext"
append "LIBSO        = lib$libname$sharedext"
append 'BUILDLIBSOV  = $(BUILDDIR)/lib/$(LIBSOV)'
append 'BUILDLIBSO   = $(BUILDDIR)/lib/$(LIBSO)'
append 'PREFIXLIBSOV = $(PREFIX)/lib/$(LIBSOV)'
append 'PREFIXLIBSO  = $(PREFIX)/lib/$(LIBSO)'
append "CC           = $CC"
append "CFLAGS       = $cflags -I./GRHayL/include"
append "CCOMPILE     = \$(CC) \$(CFLAGS)"
append "CCOMPILEOMP  = \$(CC) \$(CFLAGS)$ompcflag"
append "LD_FLAGS     = $clibs"
append "SRC          = $srcs"
append "OBJ          = $objs"
append "INCS         = $incs"
append "IHDS         = $ihds"
append 'INC         := $(INCS) $(IHDS)'
append 'LIBS         = $(BUILDLIBSO)'

# Core variables
[ -n "$tests" ] && {
  append "TEXES    = $texes"
  append "TOBJS    = $tobjs"
  append "TEXEOBJS = $texeobjs"
  append ""
}

[ -n "$datagen" ] && {
  append "DGEXES    = $dgexes"
  append "DGOBJS    = $dgobjs"
  append "DGEXEOBJS = $dgexeobjs"
  append ""
}

append "all: grhayl"
tab_append "@echo \"All done!\""
append ""

append "grhayl: \$(LIBS)"
append ""

[ -n "$tests" ] && {
  append "tests: grhayl \$(TEXES)"
  tab_append "@echo \"All done!\""
append ""
}

[ -n "$datagen" ] && {
  append "datagen: grhayl \$(DGEXES)"
  tab_append "@echo \"All done!\""
  append ""
}

# Shared build rules
gen_common_rules() {
  append "\$(BUILDLIBSO): \$(BUILDLIBSOV)"
  tab_append "$1rm -f \$(BUILDLIBSO) && ln -s \$(LIBSOV) \$(BUILDLIBSO)"
  append ""

  append "\$(BUILDLIBSOV): \$(OBJ)"
  tab_append "$1\$(CCOMPILE) -fPIC -shared \$(OBJ) -o \$@ \$(LD_FLAGS)"
  append ""

  append "\$(OBJ): \$(BUILDDIR)/%.o : GRHayL/%.c \$(INC)"
  tab_append "$1\$(CCOMPILE) -fPIC -c \$< -o \$@"
  append ""
}

if [ "$silent" -eq 0 ]; then
  gen_common_rules ""
  append "clean:"
  tab_append "rm -f \$(OBJ) \$(TEXES) \$(TOBJS) \$(BUILDLIBSO) \$(BUILDLIBSOV)"
  append "realclean: clean"
  tab_append "rm -rf \$(BUILDDIR)"
  tab_append "rm -f Makefile"
  append ""
else
  gen_common_rules "@"
  append "clean:"
  tab_append "@echo \"Removing object files\""
  tab_append "@rm -f \$(OBJ)"
  tab_append "@echo \"Removing library files\""
  tab_append "@rm -f \$(BUILDLIBSO) \$(BUILDLIBSOV)"
  tab_append "@echo \"Removing unit tests\""
  tab_append "@rm -f \$(TEXES) \$(TOBJS)"
  append ""
  append "realclean: clean"
  tab_append "@echo \"Removing build directory\""
  tab_append "@rm -rf \$(BUILDDIR)"
  tab_append "@echo \"Removing Makefile\""
  tab_append "@rm -f Makefile"
  append ""
fi

# Test rules
[ -n "$tests" ] && {
    local_prefix=""
    [ "$silent" -ne 0 ] && local_prefix="@"

  append "\$(TEXES): test/%: \$(BUILDDIR)/Unit_Tests/%.o \$(TOBJS) \$(LIBS)"
  tab_append "${local_prefix}\$(CCOMPILEOMP) \$(TOBJS) \$< -o \$@ \$(LD_FLAGS) -L\$(BUILDDIR)/lib -lgrhayl"
  append ""

  append "\$(TOBJS): \$(BUILDDIR)/%.o: %.c"
  tab_append "${local_prefix}\$(CCOMPILEOMP) -c \$< -o \$@"
  append ""

  append "\$(TEXEOBJS): \$(BUILDDIR)/%.o: %.c"
  tab_append "${local_prefix}\$(CCOMPILEOMP) -c \$< -o \$@"
  append ""
}

# Datagen rules
[ -n "$datagen" ] && {
  local_prefix=""
  [ "$silent" -ne 0 ] && local_prefix="@"

  append "\$(DGEXES): test/data_gen/%: \$(BUILDDIR)/Unit_Tests/data_gen/%.o \$(DGOBJS) \$(TOBJS) \$(LIBS)"
  tab_append "${local_prefix}\$(CCOMPILEOMP) \$(DGOBJS) \$(TOBJS) \$< -o \$@ \$(LD_FLAGS) -L\$(BUILDDIR)/lib -lgrhayl"
  append ""

  append "\$(DGOBJS): \$(BUILDDIR)/%.o: %.c"
  tab_append "${local_prefix}\$(CCOMPILEOMP) -c \$< -o \$@"
  append ""

  append "\$(DGEXEOBJS): \$(BUILDDIR)/%.o: %.c"
  tab_append "${local_prefix}\$(CCOMPILEOMP) -c \$< -o \$@"
  append ""
}

append "install: grhayl"
tab_append '@echo "Installing GRHayL in $(PREFIX)..."'
tab_append '@echo "Installing GRHayL headers in $(PREFIX)/include/grhayl"'
tab_append '@mkdir -p $(PREFIX)/include/grhayl'
tab_append '@cp $(IHDS) $(PREFIX)/include/grhayl'
tab_append '@echo "Installing GRHayL libraries in $(PREFIX)/lib"'
tab_append '@mkdir -p $(PREFIX)/lib'
tab_append '@cp -a $(BUILDDIR)/lib/* $(PREFIX)/lib'
append ""
append "uninstall:"
tab_append '@echo "Uninstalling GRHayL from $(PREFIX)..."'
tab_append '@echo "Uninstalling GRHayL headers from $(PREFIX)/include/grhayl"'
tab_append '@rm -rf $(PREFIX)/include/grhayl'
tab_append '@echo "Uninstalling GRHayL libraries from $(PREFIX)/lib"'
tab_append '@rm -rf $(PREFIXLIBSO) $(PREFIXLIBSOV)'
green "DONE\n"

tmp="$pkg_short configuration finished successfully"
sep=$(printf "%*s" "${#tmp}" " " | tr " " -)
printf "%s\n" $sep
printf "$tmp\n\n"
printf "%2sConfiguration information\n" " "
printf "%2s-------------------------\n" " "
printf "%4s%-19s : %s\n" " " "Version" "$pkg_version"
printf "%4s%-19s : %s\n" " " "Installation prefix" "$prefix"
printf "%4s%-19s : %s\n" " " "Build directory" "$(Realpath "$builddir")"
printf "%4s%-19s : %s\n" " " "Build type" "$buildtype"
printf "%4s%-19s : %s\n" " " "C compiler flags" "$cflags"
printf "%4s%-19s : %s\n" " " "C linking flags" "$clibs"
if [ -z "$ompcflag" ]; then
    printf "%4s%-19s : %s\n" " " "OpenMP unit tests" "No"
else
    printf "%4s%-19s : %s\n" " " "OpenMP unit tests" "Yes"
fi
if [ $silent -eq 0 ]; then
    printf "%4s%-19s : %s\n" " " "Silent Makefile" "No"
else
    printf "%4s%-19s : %s\n" " " "Silent Makefile" "Yes"
fi
if [ $usehdf5 -eq 0 ]; then
    printf "%4s%-19s : %s\n" " " "HDF5 support" "No"
else
    printf "%4s%-19s : %s\n" " " "HDF5 support" "Yes"
fi
printf "%4s%-19s : " " " "Gems found"
./scripts/parser awk "GRHayL/make.code.defn" "subdirs" | awk '{sub(/include /, "", $0); print}'
printf "%4s%-19s : %s\n" " " "Unit tests found" "$tnames"
printf "%4s%-19s : %s\n" " " "Unit tests data gen" "$dgnames"
printf "%s\n" $sep
