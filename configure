#!/bin/sh
#
# configure
#
# (c) 2024, Leo Werneck
#
# This is GRHayL's configure script, which is responsible for ensuring users are
# able to compile, test, and install GRHayL on different systems.

pkg="GRHayL"
pkg_short="GRHayL"
pkg_version="1.0.0"
libname="grhayl"

# Stop on errors
set -e

# Print text in red
red()
{
    printf "\033[1m\033[31m%s\033[0m" "$1"
}

# Print text in green
green()
{
    printf "\033[1m\033[32m%s\033[0m" "$1"
}

# Print text in blue
blue()
{
    printf "\033[1m\033[34m%s\033[0m" "$1"
}

# Print a green YES message, with our without description
green_yes()
{
    green "YES"
    if [ $# -eq 1 ]; then
        printf " (%s)\n" "$1"
    else
        printf "\n"
    fi
}

# Print a red NO message, with our without description
red_no()
{
    red "NO"
    if [ $# -eq 1 ]; then
        printf " (%s)\n" "$1"
    else
        printf "\n"
    fi
}

# Print a green DONE message
green_done()
{
  green "DONE"
  printf "\n"
}

# Print and error message and exit
error()
{
    red "ERROR: "
    printf "%s\n" "$1"
    exit 1
}

# Print help message
help_message()
{
    cat <<EOF
This is the configuration script for GRHayL
Syntax: ./configure [-h,--help] [-l,--license] [-r,--reconfigure] [-s,--silent]
                    [--noomp] [--nohdf5] [--prefix=<dir>] [--builddir=<dir>]
                    [--buildtype=<type>] [--cflags="<flag1> <flag2>..."]
                    [--clibs="<lib1> <lib2>..."] [--hdf5dir=<dir>]
                    [--hdf5inc=<dir>] [--hdf5lib=<dir>]
Options:'
    -h,--help           Print this message and exit
    -u,--usage          Print usage information and exit
    -l,--license        Print license information and exit
    -r,--reconfigure    Force overwrite of previous configuration
    -s,--silent         Generate a less verbose Makefile
    --noomp             Disables OpenMP flags when linking unit tests
    --nohdf5            Disables HDF5; for now this means no tabulated EOS
    --prefix            Installation directory
    --builddir          Build directory (default build)
    --buildtype         Build type (default debug-opt). Supported values:
                          <type>     : compiler flags
                          -----------:---------------
                          nocflags   : None
                          debug      : -Wall -std=c99 -O0 -g
                          debug-opt  : -Wall -std=c99 -march=native -fno-finite-math-only -O2 -g
                          opt        : -Wall -std=c99 -march=native -fno-finite-math-only -O2
                          production : -Wall -std=c99 -march=native -fno-finite-math-only -O3
    --cflags            Additional compilation flags
    --clibs             Additional linker flags
    --hdf5dir           Sets the HDF5 base directory. Possible values:
                          <dir> : assumes <dir>/include and <dir>/lib exist
                                  (see --hdf5inc and --hdf5lib if not)
    --hdf5inc           Sets the path to the HDF5 include directory
    --hdf5lib           Sets the path to the HDF5 lib directory
EOF
}

usage_ubuntu()
{
    cat <<EOF
--------------------------------------
Tested GRHayL configurations on Ubuntu
--------------------------------------

Ubuntu 22.04
------------
# sudo apt-get update
# sudo apt-get install -y gcc libhdf5-serial-dev
  ./configure --prefix=.
  make
  make install
EOF
}

usage_mac()
{
    cat <<EOF
-------------------------------------
Tested GRHayL configurations on macOS
-------------------------------------

macOS 13.2.1 (Intel Core i7)
----------------------------
# brew install gcc hdf5
  ./configure --prefix=. --hdf5dir=\$(brew --prefix)/opt/hdf5
  make
  make install
EOF
}

usage_falcon()
{
    cat <<EOF
--------------------------------------
Tested GRHayL configurations on Falcon
--------------------------------------

Falcon - GCC (tested on 03-29-2023)
-----------------------------------
# module list
# Currently Loaded Modules:
#   1) gcc/12.1.0   2) mpich/3.4.3   3) hdf5/1.12.2
  CC=mpicc ./configure --prefix=. --hdf5dir=\$HDF5_ROOT
  make
  make install

Falcon - Intel (tested on 03-29-2023)
-------------------------------------
# module list
# Currently Loaded Modules:
#   1) intel/2021.4.0   2) mpich/3.4.3   3) hdf5/1.12.2
  CC=mpicc ./configure --prefix=. --hdf5dir=\$HDF5_ROOT
  make
  make install
EOF
}

usage_sawtooth()
{
    cat <<EOF
----------------------------------------
Tested GRHayL configurations on Sawtooth
----------------------------------------

Sawtooth - GCC (tested on 03-29-2023)
-------------------------------------
# module list
# Currently Loaded Modules:
#   1) gcc/9.2.0-gcc-4.8.5-bxc7   2) openmpi/4.0.2-gcc-9.2.0-cuda-10.1-5xzs
#   3) cmake/3.16.2-gcc-9.2.0-r3q3   4) hdf5/1.12.0_gcc9.2.0
  CC=gcc ./configure --prefix=. --hdf5dir=\$(module show hdf5 2>&1 | awk '/"PATH"/ { match($0, "/"); s=substr($0, RSTART); sub(/\/*bin")$/, "", s); print s }')
  make
  make install

Sawtooth - Intel (tested on 03-29-2023)
---------------------------------------
# module list
# Currently Loaded Modules:
#  1) zlib/1.2.11-intel-19.0.5-p7mu   2) intel/19.0.5-gcc-9.2.0-kl4p
#  3) intel-mpi/2018.5.288-intel-19.0.5-alnu   4) hdf5/1.10.6-intel-19.0.5-m6j7
  CC=mpiicc ./configure --prefix=. --hdf5dir=\$(module show hdf5 2>&1 | awk '/"PATH"/ { match($0, "/"); s=substr($0, RSTART); sub(/\/*bin")$/, "", s); print s }')
  make
  make install
EOF
}

usage_lemhi()
{
    cat <<EOF
-------------------------------------
Tested GRHayL configurations on Lemhi
-------------------------------------

Lemhi - GCC (tested on 03-29-2023)
----------------------------------
# module list
# Currently Loaded Modules:
#   1) gcc/11.2.0-gcc-9.4.0-mm7z   2) openjdk/11.0.12_7-gcc-11.2.0-gzj7
#   3) openmpi/4.1.1-gcc-11.2.0-nt2l   4) zlib/1.2.11-gcc-11.2.0-lnxa
#   5) hdf5/1.12.2-gcc-11.2.0-ej5f
  CC=gcc ./configure --prefix=. --hdf5dir=\$(module show hdf5 2>&1 | awk '/"PATH"/ { match($0, "/"); s=substr($0, RSTART); sub(/\/*bin")$/, "", s); print s }')
  make
  make install
EOF
}

usage_message()
{
    cat <<EOF
-----------
Basic usage
-----------

To compile and install GRHayL on your local machine, run:

  ./configure
  make
  make install

To install GRHayL on the current directory instead of /usr/local, replace the
first line above by one of the following three, which should all be equivalent:

  ./configure --prefix=.
  ./configure --prefix=`pwd`
  ./configure --prefix=$(pwd)

To change the compiler, set the CC environment variable before configuring, i.e.

  CC=mpiicc ./configure

or

  export CC=mpiicc
  ./configure

The tabulated EOS gem in GRHayL depends on HDF5. By default, the configuration
script will attempt to find the HDF5 installation through pkg-config. If it
cannot be found, then an error will be produced. If HDF5 is installed in your
system but pkg-config cannot find it, you can specify the HDF5 installation
directory using

  ./configure --hdf5dir=<hdf5_directory>

Alternatively, if your installation is non-standard, you can manually specify
the include and lib directories of your HDF5 installation using

  ./configure --hdf5inc=<hdf5_include_directory> --hdf5lib=<hdf5_lib_directory>

If you are interested in hybrid EOS only, the HDF5 dependency might be
undesirable. To disable HDF5, simply run

  ./configure --nohdf5.

-----------------------
Specific configurations
-----------------------

To see specific configurations, please run one of the following commands:

  ./configure --usage ubuntu
  ./configure --usage mac
  ./configure --usage falcon
  ./configure --usage sawtooth
  ./configure --usage lemhi

In all cases you might want to run:

  export CFLAGS="\$CFLAGS -I$(pwd)/include"
  export LD_FLAGS="\$LD_FLAGS -L$(pwd)/lib"
  export LD_LIBRARY_PATH="\$LD_LIBRARY_PATH:\$(pwd)/lib"

so that compilers can find the GRHayL headers and so that executables that use
the GRHayL library are able to run without errors.
EOF
}

# Check if a command exists
check_command()
{
  local_cmd="$1"
  local_cmd_path=$(command -v "$local_cmd")
  if [ -n "$local_cmd_path" ]; then
    printf 1
  fi
}

check_compiler()
{
  local_compiler="$1"
  printf "Checking if compiler %s exists... " "$local_compiler"
  local_compiler_path=$(command -v "$local_compiler")
  if [ "$local_compiler_path" = "" ]; then
      red_no
  else
      CC=$local_compiler
      green_yes "$local_compiler_path"
  fi
}

c_compiles()
{
  local_code=$1
  local_compiler=$2
  local_compiler_flags=$3
  local_lib_flags=$4
  local_message=$5
  local_error_message=$6
  printf "%s" "$local_message"
  set +e
  local_errors=$(printf "%s" "$local_code" | "$local_compiler" $local_compiler_flags -x c - $local_lib_flags 2>&1)
  set -e
  if [ -z "$local_errors" ]; then
    green_yes "${local_compiler}${local_compiler_flags}<objs>${local_lib_flags}"
    rm -f a.out
  else
    red_no "${local_compiler}${local_compiler_flags}<objs>${local_lib_flags}"
    rm -f a.out
    if [ -n "$local_error_message" ]; then
      error "$local_error_message"
    fi
    exit 1
  fi
}

Realdirpath()
{
  local_input_dir=$1
  cd "$local_input_dir" 2>/dev/null && pwd
}

NL='
'
probe_file()
{
    local_dir="$1"
    local_filename="$2"
    filepath=$(find "$local_dir" -f "$local_filename")
    if [ -z "$filepath" ]; then
      printf 1 # Didn't find file
    fi
}

set_hdf5()
{
    for dir in $1 $2; do
        if [ ! -d "$dir" ]; then
            error "Directory $dir not found"
        fi
    done
    printf "Checking if hdf5.h can be found in %s... " "$1"
    err=$(probe_file "$1"/ hdf5.h)
    if [ -n "$err" ]; then
      red_no
      error "hdf5.h not found"
    else
        green_yes "$tmp_"
        cflags="$cflags -I$(dirname "$tmp_")"
    fi
    for f in $hdf5libfiles; do
        printf "Checking if %s can be found in %s... " "$f" "$2"
        probe_file "$2"/ "$f"
        if [ $? -ne 0 ]; then
            red_no;
            if [ "$f" = "libhdf5.a" ]; then
                printf 1
            fi
        else
            green_yes "$tmp_"
            clibs="$clibs -L$(dirname "$tmp_") -lhdf5"
            break
        fi
    done
}

silent=0
reconfigure=0
input_prefix="/usr/local"
buildtype="debug-opt"
input_builddir="build"
ompcflag=" -fopenmp"
usehdf5=1
cflags=""
clibs=""
hdf5dir=""
hdf5inc=""
hdf5lib=""

while [ $# -gt 0 ]; do
    case $1 in
        -h|--help) help_message; exit;;
        -u|--usage)
            case $2 in
                ubuntu) usage_ubuntu; exit;;
                mac) usage_mac; exit;;
                falcon) usage_falcon; exit;;
                sawtooth) usage_sawtooth; exit;;
                lemhi) usage_lemhi; exit;;
            esac
            usage_message; exit;;
        -l|--license)
            if [ -f LICENSE ]; then
                cat LICENSE; exit
            else
                printf "License file (LICENSE) does not exist\n"; exit
            fi
            ;;
        -r|--reconfigure) reconfigure=1;;
        -s|--silent) silent=1;;
        --noomp) ompcflag="";;
        --nohdf5) usehdf5=0;;
        --prefix=*) input_prefix=$(echo "$1" | cut -d= -f2);;
        --buildtype=*) buildtype=$(echo "$1" | cut -d= -f2);;
        --builddir=*) input_builddir=$(echo "$1" | cut -d= -f2);;
        --cflags=*) cflags=$(echo "$1" | cut -d= -f2);;
        --clibs=*) clibs=$(echo "$1" | cut -d= -f2);;
        --hdf5dir=*) hdf5dir=$(echo "$1" | cut -d= -f2);;
        --hdf5inc=*) hdf5inc=$(echo "$1" | cut -d= -f2);;
        --hdf5lib=*) hdf5lib=$(echo "$1" | cut -d= -f2);;
        --prefix) input_prefix=$2; shift;;
        --buildtype) buildtype=$2; shift;;
        --builddir) input_builddir=$2; shift;;
        --cflags) cflags=$2; shift;;
        --clibs) clibs=$2; shift;;
        --hdf5dir) hdf5dir=$2; shift;;
        --hdf5inc) hdf5inc=$2; shift;;
        --hdf5lib) hdf5lib=$2; shift;;
        --) shift; break;;
        -*)
            opt=$1
            opt_length=$(echo "$opt" | awk '{print length}')
            for i in $(seq 2 "$opt_length"); do
                char=$(echo "$opt" | cut -c"$i")
                case $char in
                    h) help_message; exit;;
                    u) usage_message; exit;;
                    l)
                        if [ -f LICENSE ]; then
                            cat LICENSE; exit
                        else
                            printf "License file (LICENSE) does not exist\n"; exit
                        fi
                        ;;
                    r) reconfigure=1;;
                    s) silent=1;;
                    *) echo "Warning: ignoring unknown option: $char";;
                esac
            done
            ;;
        *) echo "Warning: ignoring unknown option: $1";;
    esac
    shift
done

prefix=$(Realdirpath "$input_prefix")
if [ -z "$prefix" ]; then
  error "Could not resolve prefix \"$input_prefix\""
fi

builddir=$(Realdirpath "$input_builddir")
if [ -z "$builddir" ]; then
  error "Could not resolve build directory \"$input_builddir\""
fi

if [ -f "$builddir"/.check ] && [ $reconfigure -eq 0 ]; then
    printf "Build directory '%s' exists. Stopping configuration.\n" "$builddir"
    printf "Run with -r or --reconfigure to force a new configuration.\n"
    exit 1
fi

printf "Beginning configuration script for %s...\n" "$pkg"
printf "Detecting system... "
unames=$(uname -s)
case $unames in
    Linux)
        printf "%s\n" "$(green "$unames")"
        hdf5libfiles="libhdf5.so libhdf5.a"
        sharedext=".so"
        ;;
    Darwin)
        printf "%s\n" "$(green "$unames")"
        hdf5libfiles="libhdf5.dylib libhdf5.a"
        sharedext=".dylib"
        ;;
    *)
        printf "Unsupported system %s\n" "$(red "$unames")"
        exit 1;;
esac

printf "Checking if command awk exists... "
have_awk=$(check_command awk)
if [ -z "$have_awk" ]; then
  red_no
  error "awk is required by the build system. Cannot proceed.\n"
else
  green_yes
fi

printf "Checking if command pkg-config exists... "
have_pkg_config=$(check_command pkg-config)
if [ -z "$have_pkg_config" ]; then
  red_no
else
  green_yes
fi

printf "Checking if build type is valid... "
case $buildtype in
         plain) ;;
         debug) BUILDCFLAGS="-Wall -std=c99 -O0 -g";;
     debug-opt) BUILDCFLAGS="-Wall -std=c99 -march=native -fno-finite-math-only -O2 -g";;
           opt) BUILDCFLAGS="-Wall -std=c99 -march=native -fno-finite-math-only -O2";;
    production) BUILDCFLAGS="-Wall -std=c99 -march=native -O3";;
             *) printf "%s\nUnsupported built type, use ./configure -h for help\n" "$(red "$buildtype")"
                exit 1;;
esac
green_yes "buildtype: $buildtype; build flags: $BUILDCFLAGS"

printf "Checking if cflags were provided... "
if [ "$cflags" = "" ]; then
    green "NO"
    echo ""
else
    green_yes "$cflags"
fi
cflags="$BUILDCFLAGS $cflags"

printf "Checking if clibs were provided... "
if [ "$clibs" = "" ]; then
    green "NO"
    echo ""
else
    green_yes "$clibs"
fi

for compiler in gcc clang icc icx cc; do
    if [ -z "$CC" ]; then
        check_compiler $compiler
    else
        break
    fi
done

clibs=$(printf "%s" "-lm $clibs" | awk '{sub(/ *$/, "", $0); print}')

c_compiles "int main() { return 0; }" "$CC" " -O0 " "" "Checking if C compiler works... "
code='
#include <stdio.h>
#include <math.h>

int main() {
  printf("%.15e\n", cos(2.3456));
  return 0;
}
'
c_compiles "$code" "$CC" " -O0 " " -lm" "Checking if compiler works with -lm linker flag... "
c_compiles "$code" "$CC" " $cflags " " $clibs" "Checking if compiler works with build flags... "

if [ -n "$ompcflag" ]; then
  code='
#include <stdio.h>
#include <omp.h>
int main() {
  #pragma omp parallel
  {
    printf("Hello, world!\\n");
  }
  return 0;
}
'
  error_msg="OpenMP compilation failed. Disable with --noomp."
  c_compiles "$code" "$CC" " -O0$ompcflag " " $clibs" "Checking if compiler works with$ompcflag flag... " "$error_msg"
fi

if [ $usehdf5 -eq 0 ]; then
    cflags="$cflags -DGRHAYL_DISABLE_HDF5"
else
    if [ "$hdf5dir" = "" ]; then
        if [ "$hdf5inc" = "" ] && [ "$hdf5lib" = "" ]; then
            if [ "$have_pkg_config" = "1" ]; then
                printf "Checking if hdf5 library is available with pkg-config... "
                hdf5inc=$(pkg-config hdf5 --cflags 2>/dev/null)
                hdf5lib=$(pkg-config hdf5 --libs --static 2>/dev/null)
                if [ "$hdf5inc" != "" ] && [ "$hdf5lib" != "" ]; then
                    green_yes
                    cflags="$cflags $hdf5inc"
                    clibs="$clibs $hdf5lib"
                else
                    red_no
                    red "ERROR: "
                    printf "HDF5 not found with pkg-config\n"
                    printf "Please use ./configure -h for instructions on how to manually\n"
                    printf "specify your HDF5 installation path or disable HDF5\n"
                    exit 1
                fi
            fi
        elif [ "$hdf5inc" = "" ] || [ "$hdf5lib" = "" ]; then
            error "For custom HDF5 paths, both --hdf5inc and --hdf5lib must be given\n"
        else
          local_found_hdf5=$(set_hdf5 "$hdf5inc" "$hdf5lib")
            if [ "$local_found_hdf5" -ne 0 ]; then
                error "HDF5 not found"
            fi
        fi
    else
        if [ ! -d $hdf5dir ]; then
            error "HDF5 directory $hdf5dir does not exist"
        fi
        local_found_hdf5=$(set_hdf5 "${hdf5dir}/include" "${hdf5dir}/lib")
        if [ "$local_found_hdf5" -ne 0 ]; then
            error "HDF5 not found"
        fi
    fi
    # Courtesy ChatGPT (comments removed)
    code='
#include <stdio.h>
#include <stdlib.h>
#include <hdf5.h>

int main() {
  hid_t file_id, dataset_id, dataspace_id;
  herr_t status;
  file_id = H5Fopen("test.h5", H5F_ACC_RDONLY, H5P_DEFAULT);
  if (file_id < 0) {
    fprintf(stderr, "Failed to open HDF5 file!\n");
    exit(1);
  }
  dataset_id = H5Dopen2(file_id, "test_dataset", H5P_DEFAULT);
  if (dataset_id < 0) {
    fprintf(stderr, "Failed to open HDF5 dataset!\n");
    exit(1);
  }
  dataspace_id = H5Dget_space(dataset_id);
  if (H5Sget_simple_extent_ndims(dataspace_id) != 2) {
    fprintf(stderr, "Unexpected dataspace rank!\n");
    exit(1);
  }
  hsize_t dims[2];
  status = H5Sget_simple_extent_dims(dataspace_id, dims, NULL);
  if (status < 0 || dims[0] != 5 || dims[1] != 10) {
    fprintf(stderr, "Unexpected dataspace dimensions!\n");
    exit(1);
  }
  status = H5Dclose(dataset_id);
  status = H5Fclose(file_id);
  printf("HDF5 installation is OK!\n");
  return 0;
}
'
    error_msg="C compiler does not work with hdf5. Use ./configure --nohdf5 to disable hdf5 or
       run ./configure -h for more information on how to specify your hdf5 installation."
    c_compiles "$code" "$CC" " $cflags " " $clibs" "Checking if compiler works with hdf5... " "$error_msg" 
fi

parse_mcd()
{
    name=$(printf "$2" | awk '{n=split($0, arr, "/"); print arr[n]}')
    if [ "$3" = "0" ]; then
        printf "$1- %s\n" $(blue $name)
    elif [ "$3" = "1" ]; then
        mkdir -p $(printf $2 | awk -v bd=$builddir '{sub(/^GRHayL\//, "", $0); printf("%s/%s", bd, $0)}')
        printf "$1- %s\n" $(green $name)
    else
        mkdir -p $(printf $2 | awk -v bd=$builddir '{sub(/^GRHayL\//, "", $0); printf("%s/%s", bd, $0)}')
        printf "$1- $name\n"
    fi
    file="$2/make.code.defn"
    if [ ! -f $file ]; then
        error "File $file not found"
    fi
    for sd in $(./scripts/parser awk $file "subdirs"); do
        sdsrcs=$(./scripts/parser awk "$2/$sd/make.code.defn" "sources")
        sdincs=$(./scripts/parser awk "$2/$sd/make.code.defn" "headers")
        sdihds=$(./scripts/parser awk "$2/$sd/make.code.defn" "install_headers")
        srcs="$srcs $sdsrcs"
        incs="$incs $sdincs"
        ihds="$ihds $sdihds"
        parse_mcd "$1  " $2/$sd $(($3+1))
    done
}

printf "Creating build directory tree (build directory: $builddir):\n"
srcs=""
incs=""
ihds=""
parse_mcd "  " "GRHayL" 0
printf "Symlinking header files in GRHayL/include to $builddir/include... "
rm -f $builddir/include/*
ln -s `pwd`/GRHayL/include/*.h $builddir/include
green_done
printf "Creating directory $builddir/lib... "
mkdir -p $builddir/lib
green_done
printf "Auto-generated by GRHayL's configuration script\n" > $builddir/.check

# Sanitize all white space (not really necessary)
cflags=$(printf "%s" "$cflags" | awk '{gsub(/  */, " ", $0); sub(/^ */, "", $0); sub(/ $/, "", $0); print}')
clibs=$(printf "%s" "$clibs" | awk '{gsub(/  */, " ", $0); sub(/^ */, "", $0); sub(/ $/, "", $0); print}')
srcs=$(printf "$srcs" | awk '{gsub(/  */, " ", $0); sub(/^ */, "", $0); sub(/ $/, "", $0); print}')
incs=$(printf "$incs" | awk '{gsub(/  */, " ", $0); sub(/^ */, "", $0); sub(/ $/, "", $0); print}')
ihds=$(printf "$ihds" | awk '{gsub(/  */, " ", $0); sub(/^ */, "", $0); sub(/ $/, "", $0); print}')
objs=$(printf "$srcs" | awk -v bd=$builddir '{gsub("GRHayL/", sprintf("%s/", bd), $0); gsub(/\.c/, ".o", $0); print}')
tests=$(find Unit_Tests -maxdepth 1 -name 'unit_test_*.c')
datagen=$(find Unit_Tests/data_gen -maxdepth 1 -name 'unit_test_data_*.c')
if [ "$tests" = "" ]; then
    tnames="None"
else
    tnames=$(printf "$tests" | sort | \
                awk '{
  split($0, a, "/")
  sub(/^unit_test_/, "", a[2])
  sub(/\.c/, "", a[2])
  if( NR == 1 )
    print "-", a[2]
  else
    printf("%26s- %s\n", " ", a[2])
}
END { print tests }
')
    tests=$(echo $tests)
    tsrcs=$(echo $(find Unit_Tests -maxdepth 1 -name '*.c' ! -name 'unit_test_*.c'))
    tobjs=$(printf "$tsrcs" | awk '{
    gsub(/\.c/, ".o", $0)
    for(i=1;i<=NF;i++) {
      tobjs=sprintf("%s%s%s ", tobjs, "build/", $i)
    }
    print tobjs
}')
    texes=$(printf "$tests" | awk '{ gsub(/\.c/, "", $0); gsub(/Unit_Tests\//, "test/", $0); print }')
    texeobjs=$(printf "$tests" | awk '{ gsub(/\.c/, ".o", $0); gsub(/Unit_Tests\//, "build/Unit_Tests/", $0); print }')
    mkdir -p $builddir/Unit_Tests test
fi

if [ "$datagen" = "" ]; then
    dgnames="None"
else
    dgnames=$(printf "$datagen" | sort | \
                awk '{
  split($0, a, "/")
  sub(/^unit_test_data_/, "", a[3])
  sub(/\.c/, "", a[3])
  if( NR == 1 )
    print "-", a[3]
  else
    printf("%26s- %s\n", " ", a[3])
}
END { print tests }
')
    datagen=$(echo $datagen)
    dgsrcs=$(echo $(find Unit_Tests/data_gen -maxdepth 1 -name '*.c' ! -name 'unit_test_data_*.c'))
    dgobjs=$(printf "$dgsrcs" | awk '{
    gsub(/\.c/, ".o", $0)
    for(i=1;i<=NF;i++) {
      dgobjs=sprintf("%s%s%s ", dgobjs, "build/", $i)
    }
    print dgobjs
}')
    dgexes=$(printf "$datagen" | awk '{ gsub(/\.c/, "", $0); gsub(/Unit_Tests\/data_gen\//, "test/data_gen/", $0); print }')
    dgexeobjs=$(printf "$datagen" | awk '{ gsub(/\.c/, ".o", $0); gsub(/Unit_Tests\/data_gen\//, "build/Unit_Tests/data_gen/", $0); print }')
    mkdir -p $builddir/Unit_Tests/data_gen test/data_gen
fi

printf "Generating Makefile... "
rm -f Makefile
{
  printf "# Makefile automatically generated by %s's configure scripts
PREFIX       = %s
BUILDDIR     = %s
LIBSOV       = %s
LIBSO        = %s
BUILDLIBSOV  = %s
BUILDLIBSO   = %s
PREFIXLIBSOV = %s
PREFIXLIBSO  = %s
CC           = %s
CFLAGS       = %s
CCOMPILE     = %s
CCOMPILEOMP  = %s
LD_FLAGS     = %s
SRC          = %s
OBJ          = %s
INCS         = %s
IHDS         = %s
INC         := %s %s
LIBS         = %s" \
  "$pkg" \
  "$prefix" \
  "$builddir" \
  "lib${libname}_${pkg_version}${sharedext}" \
  "lib${libname}${sharedext}" \
  "${builddir}/lib/lib${libname}_${pkg_version}${sharedext}" \
  "${builddir}/lib/lib${libname}${sharedext}" \
  "${prefix}/lib/lib${libname}_${pkg_version}${sharedext}" \
  "${prefix}/lib/lib${libname}${sharedext}" \
  "$CC" \
  "$cflags -I./GRHayL/include" \
  "\${CC} \${CFLAGS}" \
  "\${CC} \${CFLAGS}${ompcflag}" \
  "$clibs" \
  "$srcs" \
  "$objs" \
  "$incs" \
  "$ihds" \
  "$incs" \
  "$ihds" \
  "\${BUILDLIBSO}"
  if [ "$tests" != "" ]; then
    printf "
TEXES    = %s
TOBJS    = %s
TEXEOBJS = %s" "$texes" "$tobjs" "$texeobjs"
  fi
  if [ "$datagen" != "" ]; then
  printf "
DGEXES    = %s
DGOBJS    = %s
DGEXEOBJS = %s\n" "$dgexes" "$dgobjs" "$dgexeobjs"
  fi
  printf "
all: grhayl
\t@echo \"All done!\"

grhayl: \$(LIBS)

tests: grhayl \$(TEXES)
\t@echo \"All done!\"

datagen: grhayl \$(DGEXES)
\t@echo \"All done!\""
  if [ $silent -eq 0 ]; then
    printf "
\$(BUILDLIBSO): \$(BUILDLIBSOV)
\trm -f \$(BUILDLIBSO) && ln -s \$(LIBSOV) \$(BUILDLIBSO)

\$(BUILDLIBSOV): \$(OBJ)
\t\$(CCOMPILE) -fPIC -shared \$(OBJ) -o \$@ \$(LD_FLAGS)

\$(OBJ): \$(BUILDDIR)/%%.o : GRHayL/%%.c \$(INC)
\t\$(CCOMPILE) -fPIC -c \$< -o \$@

clean:
\trm -f \$(OBJ) \$(TEXES) \$(TOBJS) \$(BUILDLIBSO) \$(BUILDLIBSOV)
realclean: clean
\trm -rf \$(BUILDDIR)
\trm -f Makefile"
    if [ "$tests" != "" ]; then
      printf "
\$(TEXES): test/%%: \$(BUILDDIR)/Unit_Tests/%%.o \$(TOBJS) \$(LIBS)
\t\$(CCOMPILEOMP) \$(TOBJS) \$< -o \$@ \$(LD_FLAGS) -L\$(BUILDDIR)/lib -lgrhayl

\$(TOBJS): \$(BUILDDIR)/%%.o: %%.c
\t\$(CCOMPILEOMP) -c \$< -o \$@

\$(TEXEOBJS): \$(BUILDDIR)/%%.o: %%.c
\t\$(CCOMPILEOMP) -c \$< -o \$@"
    fi
    if [ "$datagen" != "" ]; then
    printf "
\$(DGEXES): test/data_gen/%%: \$(BUILDDIR)/Unit_Tests/data_gen/%%.o \$(DGOBJS) \$(TOBJS) \$(LIBS)
\t\$(CCOMPILEOMP) \$(DGOBJS) \$(TOBJS) \$< -o \$@ \$(LD_FLAGS) -L\$(BUILDDIR)/lib -lgrhayl

\$(DGOBJS): \$(BUILDDIR)/%%.o: %%.c
\t\$(CCOMPILEOMP) -c \$< -o \$@

\$(DGEXEOBJS): \$(BUILDDIR)/%%.o: %%.c
\t\$(CCOMPILEOMP) -c \$< -o \$@"
    fi
  else
    printf "
\$(BUILDLIBSO): \$(BUILDLIBSOV)
\t@echo \"Creating symlink to \$@\"
\t@rm -f \$(BUILDLIBSO) && ln -s \$(LIBSOV) \$(BUILDLIBSO)

\$(BUILDLIBSOV): \$(OBJ)
\t@echo \"Linking GRHayL shared library\"
\t@\$(CCOMPILE) -fPIC -shared \$(OBJ) -o \$@ \$(LD_FLAGS)

\$(OBJ): \$(BUILDDIR)/%%.o : GRHayL/%%.c \$(INC)
\t@echo \"Compiling \$<\"
\t@\$(CCOMPILE) -fPIC -c \$< -o \$@

clean:
\t@echo \"Removing object files\"
\t@rm -f \$(OBJ)
\t@echo \"Removing library files\"
\t@rm -f \$(BUILDLIBSO) \$(BUILDLIBSOV)
\t@echo \"Removing unit tests\"
\t@rm -f \$(TEXES) \$(TOBJS)

realclean: clean
\t@echo \"Removing build directory\"
\t@rm -rf \$(BUILDDIR)
\t@echo \"Removing Makefile\"
\t@rm -f Makefile"
    if [ "$tests" != "" ]; then
      printf "
\$(TEXES): test/%%: \$(BUILDDIR)/Unit_Tests/%%.o \$(TOBJS) \$(LIBS)
\t@echo \"Linking \$@\"
\t@\$(CCOMPILEOMP) \$(TOBJS) \$< -o \$@ \$(LD_FLAGS) -L\$(BUILDDIR)/lib -lgrhayl

\$(TOBJS): \$(BUILDDIR)/%%.o: %%.c
\t@echo \"Compiling \$<\"
\t@\$(CCOMPILEOMP) -c \$< -o \$@

\$(TEXEOBJS): \$(BUILDDIR)/%%.o: %%.c
\t@echo \"Compiling \$<\"
\t@\$(CCOMPILEOMP) -c \$< -o \$@"
    fi
    if [ "$datagen" != "" ]; then
      printf "
\$(DGEXES): test/%%: \$(BUILDDIR)/Unit_Tests/%%.o \$(DGOBJS) \$(TOBJS) \$(LIBS)
\t@echo \"Linking \$@\"
\t@\$(CCOMPILEOMP) \$(DGOBJS) \$(TOBJS) \$< -o \$@ \$(LD_FLAGS) -L\$(BUILDDIR)/lib -lgrhayl

\$(DGOBJS): \$(BUILDDIR)/%%.o: %%.c
\t@echo \"Compiling \$<\"
\t@\$(CCOMPILEOMP) -c \$< -o \$@

\$(DGEXEOBJS): \$(BUILDDIR)/%%.o: %%.c
\t@echo \"Compiling \$<\"
\t@\$(CCOMPILEOMP) -c \$< -o \$@"
    fi
  fi
  printf "
install: grhayl
\t@echo \"Installing GRHayL in \$(PREFIX)...\"
\t@echo \"Installing GRHayL headers in \$(PREFIX)/include/grhayl\"
\t@mkdir -p \$(PREFIX)/include/grhayl
\t@cp \$(IHDS) \$(PREFIX)/include/grhayl
\t@echo \"Installing GRHayL libraries in \$(PREFIX)/lib\"
\t@mkdir -p \$(PREFIX)/lib
\t@cp -a \$(BUILDDIR)/lib/* \$(PREFIX)/lib

uninstall:
\t@echo \"Uninstalling GRHayL from \$(PREFIX)...\"
\t@echo \"Uninstalling GRHayL headers from \$(PREFIX)/include/grhayl\"
\t@rm -rf \$(PREFIX)/include/grhayl
\t@echo \"Uninstalling GRHayL libraries from \$(PREFIX)/lib\"
\t@rm -rf \$(PREFIXLIBSO) \$(PREFIXLIBSOV)
"
} > "Makefile"
green_done

tmp=$(printf "%s" "$pkg_short configuration finished successfully")
sep=$(printf "%*s" "${#tmp}" " " | tr " " -)
printf "
%s
%s
  -------------------------
  Configuration information
  -------------------------
%4s%-19s : %s
%4s%-19s : %s
%4s%-19s : %s
%4s%-19s : %s
%4s%-19s : %s
%4s%-19s : %s" \
  "$sep" \
  "$tmp" \
  " " "Version" "$pkg_version" \
  " " "Installation prefix" "$prefix" \
  " " "Build directory" "$(Realdirpath "$builddir")" \
  " " "Build type" "$buildtype" \
  " " "C compiler flags" "$cflags" \
  " " "C linking flags" "$clibs"

if [ "$ompcflag" = "" ]; then
    printf "\n%4s%-19s : %s" " " "OpenMP unit tests" "No"
else
    printf "\n%4s%-19s : %s" " " "OpenMP unit tests" "Yes"
fi
if [ $silent -eq 0 ]; then
    printf "\n%4s%-19s : %s" " " "Silent Makefile" "No"
else
    printf "\n%4s%-19s : %s" " " "Silent Makefile" "Yes"
fi
if [ $usehdf5 -eq 0 ]; then
    printf "\n%4s%-19s : %s" " " "HDF5 support" "No"
else
    printf "\n%4s%-19s : %s" " " "HDF5 support" "Yes"
fi


printf "
%4s%-19s : %s
%4s%-19s : %s
%4s%-19s : %s
%s
" \
  " " "Gems found" "$(./scripts/parser awk "GRHayL/make.code.defn" "subdirs" | awk '{sub(/include /, "", $0); print}')" \
  " " "Unit tests found" "$tnames" \
  " " "Unit tests data gen" "$dgnames"  \
  "$sep"

