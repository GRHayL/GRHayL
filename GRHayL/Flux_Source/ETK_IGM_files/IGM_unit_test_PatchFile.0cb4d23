diff -ruN src/add_fluxes_and_source_terms_to_hydro_rhss.C ET_2022_12/Cactus/repos/wvuthorns/IllinoisGRMHD/src/add_fluxes_and_source_terms_to_hydro_rhss.C
--- src/add_fluxes_and_source_terms_to_hydro_rhss.C	2023-02-16 12:41:44.392842042 -0800
+++ ET_2022_12/Cactus/repos/wvuthorns/IllinoisGRMHD/src/add_fluxes_and_source_terms_to_hydro_rhss.C	2023-02-15 15:01:39.921039842 -0800
@@ -45,6 +45,10 @@
   // Notice in the loop below that we go from 3 to cctk_lsh-2 for i, j, AND k, even though
   //   we are only computing the flux in one direction at a time. This is because in the end,
   //   we only need the rhs's from 3 to cctk_lsh-3 for i, j, and k.
+  char out_filename[100];
+  sprintf(out_filename, "fluxes_dirn%d.txt", flux_dirn);
+  FILE *out3D = fopen(out_filename, "wb");
+   
 #pragma omp parallel for
   for(int k=cctk_nghostzones[2];k<cctk_lsh[2]-(cctk_nghostzones[2]-1);k++) for(int j=cctk_nghostzones[1];j<cctk_lsh[1]-(cctk_nghostzones[1]-1);j++) for(int i=cctk_nghostzones[0];i<cctk_lsh[0]-(cctk_nghostzones[0]-1);i++) {
 	int index = CCTK_GFINDEX3D(cctkGH,i,j,k);
@@ -73,7 +77,7 @@
 
 	// Next compute the metric values at the {i,j,k} +/- 1/2 faces (i.e., the "face values" of the metric)
 	CCTK_REAL FACEVAL[NUMVARS_FOR_METRIC_FACEVALS],FACEVALp1[NUMVARS_FOR_METRIC_FACEVALS];
-	for(int w=0;w<NUMVARS_FOR_METRIC_FACEVALS;w++) FACEVAL[w]   = COMPUTE_FCVAL(METRICm2[w],METRICm1[w],METRIC[w],METRICp1[w]);
+	for(int w=0;w<NUMVARS_FOR_METRIC_FACEVALS;w++) FACEVAL[w]   = COMPUTE_FCVAL(METRICm2[w],METRICm1[w],METRIC[w],METRICp1[w]); //if (w==8) {printf("%d %d %d ::: %.15e\n", i, j, k, FACEVAL[w]);}}
 	for(int w=0;w<NUMVARS_FOR_METRIC_FACEVALS;w++) FACEVALp1[w] = COMPUTE_FCVAL(METRICm1[w],METRIC[w],METRICp1[w],METRICp2[w]);
 	// Then compute the lapse and Psi4 = exp(4*phi)
 	CCTK_REAL FACEVAL_LAPSE_PSI4[NUMVARS_METRIC_AUX],FACEVAL_LAPSE_PSI4p1[NUMVARS_METRIC_AUX];
@@ -90,6 +94,7 @@
 	// If we are not in the ghostzones, then add third-order accurate curvature terms to \tilde{S}_i RHS's
 	//    Without this if() statement, _rhs variables are in general set to nonzero values in ghostzones, which messes up frozen BC's.
 	//    Also, this if() statement should speed up the computation slightly.
+
 	if(k<cctk_lsh[2]-cctk_nghostzones[2] && j<cctk_lsh[1]-cctk_nghostzones[1] && i<cctk_lsh[0]-cctk_nghostzones[0]) {
 
 	  CCTK_REAL Psi6 = METRIC_LAP_PSI4[PSI2]*METRIC_LAP_PSI4[PSI4];
@@ -115,6 +120,18 @@
 	  partial_i_gmunu[2][3] = (g4yz_fp1 - g4yz_f)*dxi[flux_dirn];
 	  partial_i_gmunu[3][3] = (g4zz_fp1 - g4zz_f)*dxi[flux_dirn];
 
+	  // printf("%.15e %.15e\n", g4yy_fp1 - g4yy_f, g4tt_fp1 - g4tt_f);
+	  // printf("%.15e\n", dxi[flux_dirn]);
+
+	  fprintf(out3D,"%d %d %d %.15e %.15e %.15e %.15e %.15e %.15e %.15e\n", 
+        i, j, k,
+				st_x_flux[index],
+				st_y_flux[index],
+				st_z_flux[index],						
+        rho_star_flux[index],
+				tau_flux[index],
+				cmax[index],cmin[index]);
+
 	  // Needed for tau_rhs computation:
 	  CCTK_REAL lapse_deriv[4] = { 0,0,0,0 };
 	  lapse_deriv[flux_dirn] = (FACEVALp1[LAPM1] - FACEVAL[LAPM1])*dxi[flux_dirn];
@@ -148,6 +165,7 @@
 	}
 
       }
+    fclose(out3D);
 
   // Notice in the loop below that we go from 3 to cctk_lsh-3 for i, j, AND k, even though
   //   we are only computing the flux in one direction. This is because in the end,
diff -ruN src/compute_tau_rhs_extrinsic_curvature_terms_and_TUPmunu.C ET_2022_12/Cactus/repos/wvuthorns/IllinoisGRMHD/src/compute_tau_rhs_extrinsic_curvature_terms_and_TUPmunu.C
--- src/compute_tau_rhs_extrinsic_curvature_terms_and_TUPmunu.C	2023-02-16 12:41:44.392842042 -0800
+++ ET_2022_12/Cactus/repos/wvuthorns/IllinoisGRMHD/src/compute_tau_rhs_extrinsic_curvature_terms_and_TUPmunu.C	2023-02-15 14:38:47.094280175 -0800
@@ -37,9 +37,11 @@
         CCTK_REAL U[8]; // 8 primitives in the set: {rho_b,P,vx,vy,vz,Bx,By,Bz}
         for(int ii=0;ii<8;ii++) U[ii] = prims[ii].gf[index];
 
-        struct output_stats stats; stats.failure_checker=0;
-        CCTK_REAL u0L;
-        impose_speed_limit_output_u0(METRIC,U,METRIC_LAP_PSI4[PSI4],METRIC_LAP_PSI4[LAPSEINV],stats, u0L);
+        // struct output_stats stats; stats.failure_checker=0;
+        // TPJ made a change here
+        CCTK_REAL u0L = U[RHOB]*U[BX_CENTER]/U[VY];
+        CCTK_REAL h   = U[PRESSURE]*U[VX]/U[VZ];
+        // impose_speed_limit_output_u0(METRIC,U,METRIC_LAP_PSI4[PSI4],METRIC_LAP_PSI4[LAPSEINV],stats, u0L);
 
         /***********************************************************/
         // Compute b^{\mu} and b^2
@@ -53,10 +55,12 @@
         /***********************************************************/
         // Next compute T^{\mu \nu}:
         //   First set h, the enthalpy:
-        CCTK_REAL h=0,  P_cold,eps_cold,dPcold_drho,eps_th,gamma_cold; /* <- Note that in setting h, we need to define several
-                                                                        *    other variables, even though they will be unused later
-                                                                        *    in this function. */
-        compute_P_cold__eps_cold__dPcold_drho__eps_th__h__gamma_cold(U,eos,P_cold,eps_cold,dPcold_drho,eps_th,h,gamma_cold);
+        // TPJ made a change here
+        // CCTK_REAL h=0,  P_cold,eps_cold,dPcold_drho,eps_th,gamma_cold; 
+        /* <- Note that in setting h, we need to define several
+        *    other variables, even though they will be unused later
+        *    in this function. */
+        // compute_P_cold__eps_cold__dPcold_drho__eps_th__h__gamma_cold(U,eos,P_cold,eps_cold,dPcold_drho,eps_th,h,gamma_cold);
 
         CCTK_REAL Psi6 = METRIC_LAP_PSI4[PSI2]*METRIC_LAP_PSI4[PSI4];
         CCTK_REAL Psim4 = 1.0/METRIC_LAP_PSI4[PSI4];
diff -ruN src/convert_ADM_to_BSSN__enforce_detgtij_eq_1__and_compute_gtupij.C ET_2022_12/Cactus/repos/wvuthorns/IllinoisGRMHD/src/convert_ADM_to_BSSN__enforce_detgtij_eq_1__and_compute_gtupij.C
--- src/convert_ADM_to_BSSN__enforce_detgtij_eq_1__and_compute_gtupij.C	2023-02-16 12:41:44.392842042 -0800
+++ ET_2022_12/Cactus/repos/wvuthorns/IllinoisGRMHD/src/convert_ADM_to_BSSN__enforce_detgtij_eq_1__and_compute_gtupij.C	2023-02-14 11:31:32.204551728 -0800
@@ -43,21 +43,21 @@
         /*********************************
          * Apply det gtij = 1 constraint *
          *********************************/
-        CCTK_REAL gtijdet = gtxxL * gtyyL * gtzzL + gtxyL * gtyzL * gtxzL + gtxzL * gtxyL * gtyzL -
-          gtxzL * gtyyL * gtxzL - gtxyL * gtxyL * gtzzL - gtxxL * gtyzL * gtyzL;
+        // CCTK_REAL gtijdet = gtxxL * gtyyL * gtzzL + gtxyL * gtyzL * gtxzL + gtxzL * gtxyL * gtyzL -
+        //   gtxzL * gtyyL * gtxzL - gtxyL * gtxyL * gtzzL - gtxxL * gtyzL * gtyzL;
 
-        CCTK_REAL gtijdet_Fm1o3 = fabs(1.0/cbrt(gtijdet));
+        // CCTK_REAL gtijdet_Fm1o3 = fabs(1.0/cbrt(gtijdet));
 
-        gtxxL = gtxxL * gtijdet_Fm1o3;
-        gtxyL = gtxyL * gtijdet_Fm1o3;
-        gtxzL = gtxzL * gtijdet_Fm1o3;
-        gtyyL = gtyyL * gtijdet_Fm1o3;
-        gtyzL = gtyzL * gtijdet_Fm1o3;
-        gtzzL = gtzzL * gtijdet_Fm1o3;
+        // gtxxL = gtxxL * gtijdet_Fm1o3;
+        // gtxyL = gtxyL * gtijdet_Fm1o3;
+        // gtxzL = gtxzL * gtijdet_Fm1o3;
+        // gtyyL = gtyyL * gtijdet_Fm1o3;
+        // gtyzL = gtyzL * gtijdet_Fm1o3;
+        // gtzzL = gtzzL * gtijdet_Fm1o3;
 
-        if(gtijdet<0.0) { CCTK_VWarn(CCTK_WARN_ALERT,__LINE__, __FILE__, CCTK_THORNSTRING,
-                                     "WARNING: det[3-metric]<0.0 at point  %d %d %d | cctk_lsh: %d %d %d. Hopefully this is occurring in gz's! gtij_phys = %.2e %.2e %.2e %.2e %.2e %.2e gtij_new = %.2e %.2e %.2e %.2e %.2e %.2e | gijdet = %.2e | gtijdet = %.2e",
-				     i,j,k,cctk_lsh[0],cctk_lsh[1],cctk_lsh[2],gxx_physL,gxy_physL,gxz_physL,gyy_physL,gyz_physL,gzz_physL,gtxxL,gtxyL,gtxzL,gtyyL,gtyzL,gtzzL,-gijdet,gtijdet); }
+        // if(gtijdet<0.0) { CCTK_VWarn(CCTK_WARN_ALERT,__LINE__, __FILE__, CCTK_THORNSTRING,
+        //                              "WARNING: det[3-metric]<0.0 at point  %d %d %d | cctk_lsh: %d %d %d. Hopefully this is occurring in gz's! gtij_phys = %.2e %.2e %.2e %.2e %.2e %.2e gtij_new = %.2e %.2e %.2e %.2e %.2e %.2e | gijdet = %.2e | gtijdet = %.2e",
+				//      i,j,k,cctk_lsh[0],cctk_lsh[1],cctk_lsh[2],gxx_physL,gxy_physL,gxz_physL,gyy_physL,gyz_physL,gzz_physL,gtxxL,gtxyL,gtxzL,gtyyL,gtyzL,gtzzL,-gijdet,gtijdet); }
 
         CCTK_REAL Psi4 = psiL*psiL*psiL*psiL;
         /*****************************************
diff -ruN src/driver_evaluate_MHD_rhs.C ET_2022_12/Cactus/repos/wvuthorns/IllinoisGRMHD/src/driver_evaluate_MHD_rhs.C
--- src/driver_evaluate_MHD_rhs.C	2023-02-16 12:41:44.392842042 -0800
+++ ET_2022_12/Cactus/repos/wvuthorns/IllinoisGRMHD/src/driver_evaluate_MHD_rhs.C	2023-02-15 15:01:33.216967163 -0800
@@ -45,6 +45,157 @@
 #include "driver_evaluate_MHD_rhs.h" /* Function prototypes for this file only */
 #include "inlined_functions.C"
 
+
+inline double randf(double scale) {
+    return fabs((rand()/(double)(RAND_MAX))*scale);
+}
+
+#define inject_and_output_random_data_all(in_filename)( { \
+FILE *in3D = fopen(in_filename, "wb");\
+for(int k=0;k<cctk_lsh[2];k++) for(int j=0;j<cctk_lsh[1];j++) for(int i=0;i<cctk_lsh[0];i++) {\
+      int index=CCTK_GFINDEX3D(cctkGH,i,j,k);\
+      double scale = 1.0;\
+      rho_b[index] = randf(scale); \
+      rho_bl[index] = randf(scale); \
+      rho_br[index] = randf(scale); \
+      P[index] = randf(scale); \
+      Pl[index] = randf(scale); \
+      Pr[index] = randf(scale); \
+      vx[index] = randf(scale); \
+      vxl[index] = randf(scale); \
+      vxr[index] = randf(scale); \
+      vy[index] = randf(scale); \
+      vyl[index] = randf(scale); \
+      vyr[index] = randf(scale); \
+      vz[index] = randf(scale); \
+      vzl[index] = randf(scale); \
+      vzr[index] = randf(scale); \
+      Bx[index] = randf(scale); \
+      Bxl[index] = randf(scale); \
+      Bxr[index] = randf(scale); \
+      By[index] = randf(scale); \
+      Byl[index] = randf(scale); \
+      Byr[index] = randf(scale); \
+      Bz[index] = randf(scale); \
+      Bzl[index] = randf(scale); \
+      Bzr[index] = randf(scale); \
+      gxx[index] = 1.23; /*randf(scale);*/ \
+      gxy[index] = 0.03; /*randf(scale);*/ \
+      gxz[index] = 0.07; /*randf(scale);*/ \
+      gyy[index] = 2.33; /*randf(scale);*/ \
+      gyz[index] = 0.041; /*randf(scale);*/ \
+      gzz[index] = 3.11; /*randf(scale);*/ \
+      alp[index] = x[index]+.2*z[index]-.33*y[index]; \
+      betax[index] = y[index]+.2*z[index]-.332*x[index]; /*randf(scale);*/ \
+      betay[index] = .9*x[index]+.44*y[index]-.33*z[index]; /*randf(scale);*/ \
+      betaz[index] = -1.2*z[index]+.27*x[index]-.33*x[index]; /*randf(scale);*/ \
+      kxx[index] = randf(scale); \
+      kxy[index] = randf(scale); \
+      kxz[index] = randf(scale); \
+      kyy[index] = randf(scale); \
+      kyz[index] = randf(scale); \
+      kzz[index] = randf(scale); \
+  }\
+  const CCTK_INT num_pts = cctk_lsh[0]*cctk_lsh[1]*cctk_lsh[2]; \
+  CCTK_REAL magic_number = 1.130814081305130e-9; \
+  fwrite(rho_b, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(P, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(rho_br, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(Pr, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(rho_bl, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(Pl, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(&magic_number, sizeof(CCTK_REAL), 1, in3D); \
+  fwrite(vx, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(vy, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(vz, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(vxr, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(vyr, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(vzr, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(vxl, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(vyl, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(vzl, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(&magic_number, sizeof(CCTK_REAL), 1, in3D); \
+  fwrite(Bx, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(By, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(Bz, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(Bxr, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(Byr, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(Bzr, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(Bxl, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(Byl, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(Bzl, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(&magic_number, sizeof(CCTK_REAL), 1, in3D); \
+  fwrite(betax, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(betay, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(betaz, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(gxx, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(gxy, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(gxz, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(gyy, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(gyz, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(gzz, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(alp, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(&magic_number, sizeof(CCTK_REAL), 1, in3D); \
+  fwrite(kxx, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(kxy, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(kxz, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(kyy, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(kyz, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(kzz, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(&magic_number, sizeof(CCTK_REAL), 1, in3D); \
+  fclose(in3D);\
+}\
+  )
+
+
+#define inject_and_output_random_data_recons(in_filename)( { \
+FILE *in3D = fopen(in_filename, "wb");\
+for(int k=0;k<cctk_lsh[2];k++) for(int j=0;j<cctk_lsh[1];j++) for(int i=0;i<cctk_lsh[0];i++) {\
+      int index=CCTK_GFINDEX3D(cctkGH,i,j,k);\
+      double scale = 1.0;\
+      rho_bl[index] = randf(scale); \
+      rho_br[index] = randf(scale); \
+      Pl[index] = randf(scale); \
+      Pr[index] = randf(scale); \
+      vxl[index] = randf(scale); \
+      vxr[index] = randf(scale); \
+      vyl[index] = randf(scale); \
+      vyr[index] = randf(scale); \
+      vzl[index] = randf(scale); \
+      vzr[index] = randf(scale); \
+      Bxl[index] = randf(scale); \
+      Bxr[index] = randf(scale); \
+      Byl[index] = randf(scale); \
+      Byr[index] = randf(scale); \
+      Bzl[index] = randf(scale); \
+      Bzr[index] = randf(scale); \
+  }\
+  const CCTK_INT num_pts = cctk_lsh[0]*cctk_lsh[1]*cctk_lsh[2]; \
+  CCTK_REAL magic_number = 1.130814081305130e-9; \
+  fwrite(rho_br, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(Pr, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(rho_bl, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(Pl, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(&magic_number, sizeof(CCTK_REAL), 1, in3D); \
+  fwrite(vxr, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(vyr, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(vzr, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(vxl, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(vyl, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(vzl, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(&magic_number, sizeof(CCTK_REAL), 1, in3D); \
+  fwrite(Bxr, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(Byr, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(Bzr, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(Bxl, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(Byl, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(Bzl, sizeof(CCTK_REAL)*(num_pts), 1, in3D); \
+  fwrite(&magic_number, sizeof(CCTK_REAL), 1, in3D); \
+  fclose(in3D);\
+}\
+  )
+
+
 extern "C" void IllinoisGRMHD_driver_evaluate_MHD_rhs(CCTK_ARGUMENTS) {
   DECLARE_CCTK_ARGUMENTS;
   DECLARE_CCTK_PARAMETERS;
@@ -61,15 +212,31 @@
   CCTK_REAL dX[3] = { CCTK_DELTA_SPACE(0), CCTK_DELTA_SPACE(1), CCTK_DELTA_SPACE(2) };
 
   // FIXME: only for single gamma-law EOS.
+  // eos_struct eos;
+  // eos.neos=neos;
+  // eos.K_poly=K_poly;
+  // eos.rho_tab[0]=rho_tab[0];
+  // eos.P_tab[0]=P_tab[0];
+  // eos.gamma_th=gamma_th;
+  // eos.eps_tab[0]=eps_tab[0];
+  // eos.k_tab[0]=k_tab[0];   eos.k_tab[1]=k_tab[1];
+  // eos.gamma_tab[0]=gamma_tab[0]; eos.gamma_tab[1]=gamma_tab[1];
+
   eos_struct eos;
-  eos.neos=neos;
-  eos.K_poly=K_poly;
-  eos.rho_tab[0]=rho_tab[0];
-  eos.P_tab[0]=P_tab[0];
-  eos.gamma_th=gamma_th;
-  eos.eps_tab[0]=eps_tab[0];
-  eos.k_tab[0]=k_tab[0];   eos.k_tab[1]=k_tab[1];
-  eos.gamma_tab[0]=gamma_tab[0]; eos.gamma_tab[1]=gamma_tab[1];
+  eos.neos=1;
+  eos.K_poly       = 0.0/0.0;
+  eos.rho_tab[0]   = 0.0/0.0;
+  eos.P_tab[0]     = 0.0/0.0;
+  eos.gamma_th     = 0.0/0.0;
+  eos.eps_tab[0]   = 0.0/0.0;
+  eos.k_tab[0]     = 0.0/0.0;
+  eos.gamma_tab[0] = 0.0/0.0;
+
+  srand (time(NULL));
+
+  char dirn1_filename[100];
+  sprintf(dirn1_filename, "input_data1.txt");
+  inject_and_output_random_data_all(dirn1_filename);
 
   // in_prims,out_prims_r, and out_prims_l are arrays of pointers to the actual gridfunctions.
   gf_and_gz_struct in_prims[MAXNUMVARS],out_prims_r[MAXNUMVARS],out_prims_l[MAXNUMVARS];
@@ -79,6 +246,8 @@
   // The order here MATTERS, and must be consistent with the global variable declarations in
   //   evaluate_MHD_rhs_headers.h (look for RHOB=0, etc.)
   //   For example, in_prims[0] _must_ be rho_b.
+
+
   int ww=0;
   in_prims[ww].gf=rho_b; out_prims_r[ww].gf=rho_br; out_prims_l[ww].gf=rho_bl; ww++;
   in_prims[ww].gf=P;     out_prims_r[ww].gf=Pr;     out_prims_l[ww].gf=Pl;     ww++;
@@ -164,6 +333,7 @@
   // 1) Compute tau_rhs extrinsic curvature terms, and
   // 2) Compute TUPmunu.
   // This function is housed in the file: "compute_tau_rhs_extrinsic_curvature_terms_and_TUPmunu.C"
+  // TPJ made a change in this file
   compute_tau_rhs_extrinsic_curvature_terms_and_TUPmunu(cctkGH,cctk_lsh,cctk_nghostzones,dX,metric,in_prims,TUPmunu,eos,
                                                         gtupxy,gtupxz,gtupyz,
                                                         kxx,kxy,kxz,kyy,kyz,kzz,
@@ -172,7 +342,8 @@
   flux_dirn=1;
   // First compute ftilde, which is used for flattening left and right face values
   // This function is housed in the file: "reconstruct_set_of_prims_PPM.C"
-  ftilde_gf_compute(cctkGH,cctk_lsh,flux_dirn, in_prims, ftilde_gf);
+  // TPJ made a change here
+  // ftilde_gf_compute(cctkGH,cctk_lsh,flux_dirn, in_prims, ftilde_gf);
 
 
   /* There are two stories going on here:
@@ -201,14 +372,15 @@
   which_prims_to_reconstruct[ww]=BY_STAGGER;ww++;
   num_prims_to_reconstruct=ww;
   // This function is housed in the file: "reconstruct_set_of_prims_PPM.C"
-  reconstruct_set_of_prims_PPM(cctkGH,cctk_lsh,flux_dirn,num_prims_to_reconstruct,which_prims_to_reconstruct,
-                               eos,in_prims,out_prims_r,out_prims_l,ftilde_gf,temporary);
+  // TPJ made a change here
+  // reconstruct_set_of_prims_PPM(cctkGH,cctk_lsh,flux_dirn,num_prims_to_reconstruct,which_prims_to_reconstruct,
+  //                              eos,in_prims,out_prims_r,out_prims_l,ftilde_gf,temporary);
   //Right and left face values of BI_CENTER are used in mhdflux computation (first to compute b^a).
-  //   Instead of reconstructing, we simply set B^x face values to be consistent with BX_STAGGER.
-#pragma omp parallel for
-  for(int k=0;k<cctk_lsh[2];k++) for(int j=0;j<cctk_lsh[1];j++) for(int i=0;i<cctk_lsh[0];i++) {
-        int index=CCTK_GFINDEX3D(cctkGH,i,j,k), indexim1=CCTK_GFINDEX3D(cctkGH,i-1+(i==0),j,k); /* indexim1=0 when i=0 */
-        out_prims_r[BX_CENTER].gf[index]=out_prims_l[BX_CENTER].gf[index]=in_prims[BX_STAGGER].gf[indexim1]; }
+//   //   Instead of reconstructing, we simply set B^x face values to be consistent with BX_STAGGER.
+// #pragma omp parallel for
+//   for(int k=0;k<cctk_lsh[2];k++) for(int j=0;j<cctk_lsh[1];j++) for(int i=0;i<cctk_lsh[0];i++) {
+//         int index=CCTK_GFINDEX3D(cctkGH,i,j,k), indexim1=CCTK_GFINDEX3D(cctkGH,i-1+(i==0),j,k); /* indexim1=0 when i=0 */
+//         out_prims_r[BX_CENTER].gf[index]=out_prims_l[BX_CENTER].gf[index]=in_prims[BX_STAGGER].gf[indexim1]; }
   // Then add fluxes to RHS for hydro variables {rho_b,P,vx,vy,vz}:
   // This function is housed in the file: "add_fluxes_and_source_terms_to_hydro_rhss.C"
   add_fluxes_and_source_terms_to_hydro_rhss(flux_dirn,cctkGH,cctk_lsh,cctk_nghostzones,dX,   metric,in_prims,TUPmunu,
@@ -222,9 +394,14 @@
   //   are defined at (i+1/2,j,k).
   // Next goal: reconstruct Bx, vx and vy at (i+1/2,j+1/2,k).
   flux_dirn=2;
+
+  char dirn2_filename[100];
+  sprintf(dirn2_filename, "input_data2.txt");
+  inject_and_output_random_data_recons(dirn2_filename);
   // First compute ftilde, which is used for flattening left and right face values
   // This function is housed in the file: "reconstruct_set_of_prims_PPM.C"
-  ftilde_gf_compute(cctkGH,cctk_lsh,flux_dirn, in_prims, ftilde_gf);
+  // TPJ made a change here
+  // ftilde_gf_compute(cctkGH,cctk_lsh,flux_dirn, in_prims, ftilde_gf);
 
   // in_prims[{VXR,VXL,VYR,VYL}].gammaDD[2]_{lo,hi} ghostzones are set to all zeros, which
   //    is incorrect. We fix this below.
@@ -261,8 +438,9 @@
   which_prims_to_reconstruct[ww]=VYL;       ww++;
   num_prims_to_reconstruct=ww;
   // This function is housed in the file: "reconstruct_set_of_prims_PPM.C"
-  reconstruct_set_of_prims_PPM(cctkGH,cctk_lsh,flux_dirn,num_prims_to_reconstruct,which_prims_to_reconstruct,
-                               eos,in_prims,out_prims_r,out_prims_l,ftilde_gf,temporary);
+  // TPJ made a change here
+  // reconstruct_set_of_prims_PPM(cctkGH,cctk_lsh,flux_dirn,num_prims_to_reconstruct,which_prims_to_reconstruct,
+  //                              eos,in_prims,out_prims_r,out_prims_l,ftilde_gf,temporary);
   ww=0;
   // Reconstruct other primitives last!
   which_prims_to_reconstruct[ww]=RHOB;      ww++;
@@ -277,14 +455,15 @@
   which_prims_to_reconstruct[ww]=BZ_STAGGER;ww++;
   num_prims_to_reconstruct=ww;
   // This function is housed in the file: "reconstruct_set_of_prims_PPM.C"
-  reconstruct_set_of_prims_PPM(cctkGH,cctk_lsh,flux_dirn,num_prims_to_reconstruct,which_prims_to_reconstruct,
-                               eos,in_prims,out_prims_r,out_prims_l,ftilde_gf,temporary);
+  // TPJ made a change here
+  // reconstruct_set_of_prims_PPM(cctkGH,cctk_lsh,flux_dirn,num_prims_to_reconstruct,which_prims_to_reconstruct,
+  //                              eos,in_prims,out_prims_r,out_prims_l,ftilde_gf,temporary);
   //Right and left face values of BI_CENTER are used in mhdflux computation (first to compute b^a).
   //   Instead of reconstructing, we simply set B^y face values to be consistent with BY_STAGGER.
-#pragma omp parallel for
-  for(int k=0;k<cctk_lsh[2];k++) for(int j=0;j<cctk_lsh[1];j++) for(int i=0;i<cctk_lsh[0];i++) {
-        int index=CCTK_GFINDEX3D(cctkGH,i,j,k), indexjm1=CCTK_GFINDEX3D(cctkGH,i,j-1+(j==0),k); /* indexjm1=0 when j=0 */
-        out_prims_r[BY_CENTER].gf[index]=out_prims_l[BY_CENTER].gf[index]=in_prims[BY_STAGGER].gf[indexjm1]; }
+// #pragma omp parallel for
+//   for(int k=0;k<cctk_lsh[2];k++) for(int j=0;j<cctk_lsh[1];j++) for(int i=0;i<cctk_lsh[0];i++) {
+//         int index=CCTK_GFINDEX3D(cctkGH,i,j,k), indexjm1=CCTK_GFINDEX3D(cctkGH,i,j-1+(j==0),k); /* indexjm1=0 when j=0 */
+//         out_prims_r[BY_CENTER].gf[index]=out_prims_l[BY_CENTER].gf[index]=in_prims[BY_STAGGER].gf[indexjm1]; }
   // Then add fluxes to RHS for hydro variables {rho_b,P,vx,vy,vz}:
   // This function is housed in the file: "add_fluxes_and_source_terms_to_hydro_rhss.C"
   add_fluxes_and_source_terms_to_hydro_rhss(flux_dirn,cctkGH,cctk_lsh,cctk_nghostzones,dX,   metric,in_prims,TUPmunu,
@@ -330,9 +509,14 @@
   in_prims[VZL]=out_prims_l[VZ];
 
   flux_dirn=3;
+  char dirn3_filename[100];
+  sprintf(dirn3_filename, "input_data3.txt");
+  inject_and_output_random_data_recons(dirn3_filename);
+
   // First compute ftilde, which is used for flattening left and right face values
   // This function is housed in the file: "reconstruct_set_of_prims_PPM.C"
-  ftilde_gf_compute(cctkGH,cctk_lsh,flux_dirn, in_prims, ftilde_gf);
+  // TPJ made a change here
+  // ftilde_gf_compute(cctkGH,cctk_lsh,flux_dirn, in_prims, ftilde_gf);
 
   /* There are two stories going on here:
    * 1) Single reconstruction to (i,j,k-1/2) for {rho,P,vx,vy,vz,Bx,By,Bz} to compute
@@ -358,8 +542,9 @@
   which_prims_to_reconstruct[ww]=VZL;       ww++;
   num_prims_to_reconstruct=ww;
   // This function is housed in the file: "reconstruct_set_of_prims_PPM.C"
-  reconstruct_set_of_prims_PPM(cctkGH,cctk_lsh,flux_dirn,num_prims_to_reconstruct,which_prims_to_reconstruct,
-                               eos,in_prims,out_prims_r,out_prims_l,ftilde_gf,temporary);
+  // TPJ made a change here
+  // reconstruct_set_of_prims_PPM(cctkGH,cctk_lsh,flux_dirn,num_prims_to_reconstruct,which_prims_to_reconstruct,
+  //                              eos,in_prims,out_prims_r,out_prims_l,ftilde_gf,temporary);
   // Reconstruct other primitives last!
   ww=0;
   which_prims_to_reconstruct[ww]=RHOB;      ww++;
@@ -374,14 +559,15 @@
   which_prims_to_reconstruct[ww]=BY_STAGGER; ww++;
   num_prims_to_reconstruct=ww;
   // This function is housed in the file: "reconstruct_set_of_prims_PPM.C"
-  reconstruct_set_of_prims_PPM(cctkGH,cctk_lsh,flux_dirn,num_prims_to_reconstruct,which_prims_to_reconstruct,
-                               eos,in_prims,out_prims_r,out_prims_l,ftilde_gf,temporary);
+  // TPJ made a change here
+  // reconstruct_set_of_prims_PPM(cctkGH,cctk_lsh,flux_dirn,num_prims_to_reconstruct,which_prims_to_reconstruct,
+  //                              eos,in_prims,out_prims_r,out_prims_l,ftilde_gf,temporary);
   //Right and left face values of BI_CENTER are used in mhdflux computation (first to compute b^a).
   //   Instead of reconstructing, we simply set B^z face values to be consistent with BZ_STAGGER.
-#pragma omp parallel for
-  for(int k=0;k<cctk_lsh[2];k++) for(int j=0;j<cctk_lsh[1];j++) for(int i=0;i<cctk_lsh[0];i++) {
-        int index=CCTK_GFINDEX3D(cctkGH,i,j,k), indexkm1=CCTK_GFINDEX3D(cctkGH,i,j,k-1+(k==0)); /* indexkm1=0 when k=0 */
-        out_prims_r[BZ_CENTER].gf[index]=out_prims_l[BZ_CENTER].gf[index]=in_prims[BZ_STAGGER].gf[indexkm1]; }
+// #pragma omp parallel for
+//   for(int k=0;k<cctk_lsh[2];k++) for(int j=0;j<cctk_lsh[1];j++) for(int i=0;i<cctk_lsh[0];i++) {
+//         int index=CCTK_GFINDEX3D(cctkGH,i,j,k), indexkm1=CCTK_GFINDEX3D(cctkGH,i,j,k-1+(k==0)); /* indexkm1=0 when k=0 */
+//         out_prims_r[BZ_CENTER].gf[index]=out_prims_l[BZ_CENTER].gf[index]=in_prims[BZ_STAGGER].gf[indexkm1]; }
   // Then add fluxes to RHS for hydro variables {rho_b,P,vx,vy,vz}:
   // This function is housed in the file: "add_fluxes_and_source_terms_to_hydro_rhss.C"
   add_fluxes_and_source_terms_to_hydro_rhss(flux_dirn,cctkGH,cctk_lsh,cctk_nghostzones,dX,   metric,in_prims,TUPmunu,
@@ -390,6 +576,45 @@
                                             rho_star_flux,tau_flux,st_x_flux,st_y_flux,st_z_flux,
                                             rho_star_rhs,tau_rhs,st_x_rhs,st_y_rhs,st_z_rhs);
 
+  // char out_filename[100];
+  // sprintf(out_filename, "output_rhs_data.txt");
+  // FILE *out3D = fopen(out_filename, "wb");
+
+  // // #pragma omp parallel for
+  // for(int k=0;k<cctk_lsh[2];k++) for(int j=0;j<cctk_lsh[1];j++) for(int i=0;i<cctk_lsh[0];i++) {
+  //   int index=CCTK_GFINDEX3D(cctkGH,i,j,k);
+
+  //  fprintf(out3D,"%d %d %d %.15e %.15e %.15e %.15e %.15e %.15e %.15e %.15e\n", 
+  //           i, j, k,
+  //           x[index], y[index], z[index],
+  //           rho_star_rhs[index], tau_rhs[index],
+  //           st_x_rhs[index], st_y_rhs[index], st_z_rhs[index]);
+  //    }
+  // fclose(out3D);
+
+  // printf("Finshed printing data.\n");
+  // exit(1);
+
+  char out_filename[100];
+  sprintf(out_filename, "output_rhs_data.txt");
+  FILE *out3D = fopen(out_filename, "wb");
+
+  const CCTK_INT num_pts = cctk_lsh[0]*cctk_lsh[1]*cctk_lsh[2];
+  CCTK_REAL magic_number = 9.524300707856655e-3;
+  fwrite(&magic_number, sizeof(CCTK_REAL), 1, out3D);
+  fwrite(rho_star_rhs, sizeof(CCTK_REAL)*(num_pts), 1, out3D);
+  fwrite(tau_rhs, sizeof(CCTK_REAL)*(num_pts), 1, out3D);
+  fwrite(st_x_rhs, sizeof(CCTK_REAL)*(num_pts), 1, out3D);
+  fwrite(&magic_number, sizeof(CCTK_REAL), 1, out3D);
+  fwrite(st_y_rhs, sizeof(CCTK_REAL)*(num_pts), 1, out3D);
+  fwrite(st_z_rhs, sizeof(CCTK_REAL)*(num_pts), 1, out3D);
+  fwrite(&magic_number, sizeof(CCTK_REAL), 1, out3D);
+  fclose(out3D);
+
+  printf("Finshed printing data.\n");
+  exit(1);
+
+
   // in_prims[{VYR,VYL,VZR,VZL}].gammaDD[2]_{lo,hi} ghostzones are not set correcty.
   //    We fix this below.
   // [Note that this is a cheap operation, copying only 8 integers and a pointer.]
diff -ruN src/inlined_functions.C ET_2022_12/Cactus/repos/wvuthorns/IllinoisGRMHD/src/inlined_functions.C
--- src/inlined_functions.C	2023-02-16 12:41:44.392842042 -0800
+++ ET_2022_12/Cactus/repos/wvuthorns/IllinoisGRMHD/src/inlined_functions.C	2023-02-15 12:14:45.196722963 -0800
@@ -61,7 +61,8 @@
   if(U[RHOB]<=0) { v02L=1.0; return; }
 
   /* c_s = sound speed = (dP_c/drho + \Gamma(\Gamma-1) \epsilon_th)/h */
-  CCTK_REAL c_s_squared  = (dPcold_drho + gamma_th*(gamma_th-1.0)*eps_th)/(h);
+  // CCTK_REAL c_s_squared  = (dPcold_drho + gamma_th*(gamma_th-1.0)*eps_th)/(h);
+  CCTK_REAL c_s_squared  = U[RHOB]*U[VZ]/(h);
   /* v_A = Alfven speed = sqrt( b^2/(rho0 h + b^2) ) */
   CCTK_REAL v_A_squared = smallb[SMALLB2]/(smallb[SMALLB2] + U[RHOB]*(h));
   v02L = v_A_squared + c_s_squared*(1.0-v_A_squared);
diff -ruN src/mhdflux.C ET_2022_12/Cactus/repos/wvuthorns/IllinoisGRMHD/src/mhdflux.C
--- src/mhdflux.C	2023-02-16 12:41:44.392842042 -0800
+++ ET_2022_12/Cactus/repos/wvuthorns/IllinoisGRMHD/src/mhdflux.C	2023-02-15 15:01:36.589003777 -0800
@@ -17,17 +17,26 @@
 
   // First compute P_{cold}, \epsilon_{cold}, dP_{cold}/drho, \epsilon_{th}, h, and \Gamma_{cold},
   // for right and left faces:
-  CCTK_REAL P_coldr,eps_coldr,dPcold_drhor=0,eps_thr=0,h_r=0,gamma_coldr;
-  compute_P_cold__eps_cold__dPcold_drho__eps_th__h__gamma_cold(Ur,eos,P_coldr,eps_coldr,dPcold_drhor,eps_thr,h_r,gamma_coldr);
-  CCTK_REAL P_coldl,eps_coldl,dPcold_drhol=0,eps_thl=0,h_l=0,gamma_coldl;
-  compute_P_cold__eps_cold__dPcold_drho__eps_th__h__gamma_cold(Ul,eos,P_coldl,eps_coldl,dPcold_drhol,eps_thl,h_l,gamma_coldl);
+  // TPJ made a change here
+  // CCTK_REAL dPcold_drhor=1.0,eps_thr=1.0,h_r=1.0; //,gamma_coldr, P_coldr,eps_coldr;
+  // compute_P_cold__eps_cold__dPcold_drho__eps_th__h__gamma_cold(Ur,eos,P_coldr,eps_coldr,dPcold_drhor,eps_thr,h_r,gamma_coldr);
+  // CCTK_REAL dPcold_drhol=1.0,eps_thl=1.0,h_l=1.0; //,gamma_coldl, P_coldl,eps_coldl;
+  // compute_P_cold__eps_cold__dPcold_drho__eps_th__h__gamma_cold(Ul,eos,P_coldl,eps_coldl,dPcold_drhol,eps_thl,h_l,gamma_coldl);
 
   //Compute face velocities
   // Begin by computing u0
-  output_stats stats; stats.failure_checker=0;
-  CCTK_REAL u0_r,u0_l;
-  impose_speed_limit_output_u0(FACEVAL,Ur,psi4,ONE_OVER_LAPSE,stats,u0_r);
-  impose_speed_limit_output_u0(FACEVAL,Ul,psi4,ONE_OVER_LAPSE,stats,u0_l);
+  // output_stats stats; stats.failure_checker=0;
+  // TPJ made a change here
+  CCTK_REAL u0_r = Ur[RHOB]*Ur[BX_CENTER]/Ur[VY];
+  CCTK_REAL u0_l = Ul[RHOB]*Ul[BX_CENTER]/Ul[VY];
+
+  CCTK_REAL h_r = Ur[PRESSURE]*Ur[VX]/Ur[VZ];
+  CCTK_REAL h_l = Ul[PRESSURE]*Ul[VX]/Ul[VZ];
+
+  CCTK_REAL dPcold_drhor=0.0/0.0, eps_thr=0.0/0.0;
+  CCTK_REAL dPcold_drhol=0.0/0.0, eps_thl=0.0/0.0;
+  // impose_speed_limit_output_u0(FACEVAL,Ur,psi4,ONE_OVER_LAPSE,stats,u0_r);
+  // impose_speed_limit_output_u0(FACEVAL,Ul,psi4,ONE_OVER_LAPSE,stats,u0_l);
 
   //Next compute b^{\mu}, the magnetic field measured in the comoving fluid frame:
   CCTK_REAL ONE_OVER_LAPSE_SQRT_4PI = ONE_OVER_LAPSE*ONE_OVER_SQRT_4PI;
@@ -75,6 +84,9 @@
              Ul[VX+offset],ONE_OVER_LAPSE_SQUARED,FACEVAL[SHIFTX+offset],psim4,FACEVAL[GUPXX+offset]);
 
   // Then compute cmax, cmin. This is required for the HLL flux.
+  // TPJ MADE A CHANGE HERE
+  // CCTK_REAL cmaxL = 1.0;
+  // CCTK_REAL cminL = 1.0;
   CCTK_REAL cmaxL =  MAX(0.0,MAX(cplusl,cplusr));
   CCTK_REAL cminL = -MIN(0.0,MIN(cminusl,cminusr));
 
